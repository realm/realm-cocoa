#slurp
#compiler-settings
commentStartToken = %%
directiveStartToken = %
#end compiler-settings
%%
%% Generate macros for tables with one column up to and including tables with $max_col columns.
%%
%set $max_cols = 15
%%
////////////////////////////////////////////////////////////////////////////
//
// TIGHTDB CONFIDENTIAL
// __________________
//
//  [2011] - [2014] TightDB Inc
//  All Rights Reserved.
//
// NOTICE:  All information contained herein is, and remains
// the property of TightDB Incorporated and its suppliers,
// if any.  The intellectual and technical concepts contained
// herein are proprietary to TightDB Incorporated
// and its suppliers and may be covered by U.S. and Foreign Patents,
// patents in process, and are protected by trade secret or copyright law.
// Dissemination of this information or reproduction of this material
// is strictly forbidden unless prior written permission is obtained
// from TightDB Incorporated.
//
////////////////////////////////////////////////////////////////////////////

/*************************************************************************
 *
 * CAUTION:  DO NOT EDIT THIS FILE -- YOUR CHANGES WILL BE LOST!
 *
 * This file is generated by Cheetah from the following template:
 *
 *     PrivateTableMacros.h.cheetah
 *
 **************************************************************************/

#import "RLMTable.h"
#import "RLMRow.h"
#import "RLMDescriptor.h"
#import "RLMQuery.h"
#import "RLMView.h"
#import "RLMColumnProxy.h"
#import "RLMPrivate.h"
#import "PrivateHelperMacros.h"

%for $i in range($max_cols)
%set $num_cols = $i + 1


#define REALM_TABLE_DEF_${num_cols}(TableName%slurp
%for $j in range($num_cols)
, CName${j+1}, CType${j+1}%slurp
%end for
) \
@interface TableName##Row: RLMRow \
%for $j in range($num_cols)
REALM_ROW_PROPERTY_DEF(CName${j+1}, CType${j+1}) \
%end for
@end \
@class TableName##Query; \
@class TableName##View; \
%for $j in range($num_cols)
REALM_QUERY_ACCESSOR_DEF(TableName, CName${j+1}, CType${j+1}) \
%end for
@interface TableName##Query: RLMQuery \
%for $j in range($num_cols)
@property(nonatomic, strong) TableName##QueryAccessor##CName${j+1}* CName${j+1}; \
%end for
-(TableName##Query*)group; \
-(TableName##Query*)Or; \
-(TableName##Query*)endGroup; \
-(TableName##Query*)subtableInColumnWithIndex:(NSUInteger)column; \
-(TableName##Query*)parent; \
-(TableName##View*)findAll; \
@end \
@interface TableName: RLMTable \
%for $j in range($num_cols)
REALM_COLUMN_PROXY_DEF(CName${j+1}, CType${j+1}) \
%end for
-(void)add##%slurp
%for $j in range($num_cols)
%if 0 < $j
%echo ' '
%end if
CName${j+1}:(REALM_ARG_TYPE(CType${j+1}))CName${j+1}%slurp
%end for
; \
-(void)insertEmptyRowAtIndex:(NSUInteger)ndx%slurp
%for $j in range($num_cols)
 CName${j+1}:(REALM_ARG_TYPE(CType${j+1}))CName${j+1}%slurp
%end for
; \
-(TableName##Row*)addEmptyRow; \
-(TableName##Row*)objectAtIndexedSubscript:(NSUInteger)ndx; \
-(TableName##Row*)objectForKeyedSubscript:(NSString *)key; \
-(TableName##Row*)rowAtIndex:(NSUInteger)ndx; \
-(TableName##Row*)rowAtLastIndex; \
-(TableName##Row*)insertEmptyRowAtIndex:(NSUInteger)ndx; \
@end \
@interface TableName##View: RLMView \
-(TableName##Row*)rowAtIndex:(NSUInteger)ndx; \
@end

#define REALM_TABLE_IMPL_${num_cols}(TableName%slurp
%for $j in range($num_cols)
, CName${j+1}, CType${j+1}%slurp
%end for
) \
@implementation TableName##Row \
{ \
%for $j in range($num_cols)
    RLMAccessor* _##CName${j+1}; \
%end for
} \
-(id)initWithTable:(RLMTable*)table ndx:(NSUInteger)ndx \
{ \
    self = [super initWithTable:table ndx:ndx]; \
    if (self) { \
%for $j in range($num_cols)
        _##CName${j+1} = [[RLMAccessor alloc] initWithRow:self columnId:${j}]; \
%end for
    } \
    return self; \
} \
%for $j in range($num_cols)
REALM_ROW_PROPERTY_IMPL(CName${j+1}, CType${j+1}) \
%end for
@end \
@implementation TableName##Query \
{ \
    TableName##Row* tmpRow; \
} \
-(long)getFastEnumStart \
{ \
    return [self indexOfFirstMatchingRowFromIndex:0]; \
} \
-(long)incrementFastEnum:(long)ndx \
{ \
    return [self indexOfFirstMatchingRowFromIndex:ndx]; \
} \
-(TableName##Row*)getRow:(long)ndx \
{ \
    return tmpRow = [[TableName##Row alloc] initWithTable:self.originTable ndx:ndx]; \
} \
%for $j in range($num_cols)
@synthesize CName${j+1} = _CName${j+1}; \
%end for
-(id)initWithTable:(RLMTable*)table \
{ \
    self = [super initWithTable:table]; \
    if (self) { \
%for $j in range($num_cols)
        _CName${j+1} = [[TableName##QueryAccessor##CName${j+1} alloc] initWithColumn:${j} query:self]; \
%end for
    } \
    return self; \
} \
-(TableName##Query*)group \
{ \
    [super group]; \
    return self; \
} \
-(TableName##Query*)Or \
{ \
    [super Or]; \
    return self; \
} \
-(TableName##Query*)endGroup \
{ \
    [super endGroup]; \
    return self; \
} \
-(TableName##Query*)subtableInColumnWithIndex:(NSUInteger)column \
{ \
    [super subtableInColumnWithIndex:column]; \
    return self; \
} \
-(TableName##Query*)parent \
{ \
    [super parent]; \
    return self; \
} \
-(TableName##View*)findAll \
{ \
    return [[TableName##View alloc] _initWithQuery:self]; \
} \
@end \
%for $j in range($num_cols)
REALM_QUERY_ACCESSOR_IMPL(TableName, CName${j+1}, CType${j+1}) \
%end for
@implementation TableName \
{ \
    TableName##Row* tmpRow; \
} \
%for $j in range($num_cols)
REALM_COLUMN_PROXY_IMPL(CName${j+1}, CType${j+1}) \
%end for
\
-(id)_initRaw \
{ \
    self = [super _initRaw]; \
    if (!self) \
        return nil; \
%for $j in range($num_cols)
    REALM_COLUMN_PROXY_INIT(self, ${j}, CName${j+1}, CType${j+1}); \
%end for
    return self; \
} \
-(id)init \
{ \
    self = [super init]; \
    if (!self) \
        return nil; \
    if (![self _addColumns]) \
        return nil; \
\
%for $j in range($num_cols)
    REALM_COLUMN_PROXY_INIT(self, ${j}, CName${j+1}, CType${j+1}); \
%end for
    return self; \
} \
-(void)add##%slurp
%for $j in range($num_cols)
CName${j+1}:(REALM_ARG_TYPE(CType${j+1}))CName${j+1} %slurp
%end for
\
{ \
    NSUInteger ndx = self.rowCount; \
%for $j in range($num_cols)
    REALM_COLUMN_INSERT(self, ${j}, ndx, CName${j+1}, CType${j+1}); \
%end for
    [self RLM_insertDone]; \
} \
-(void)insertEmptyRowAtIndex:(NSUInteger)ndx %slurp
%for $j in range($num_cols)
CName${j+1}:(REALM_ARG_TYPE(CType${j+1}))CName${j+1} %slurp
%end for
\
{ \
%for $j in range($num_cols)
    REALM_COLUMN_INSERT(self, ${j}, ndx, CName${j+1}, CType${j+1}); \
%end for
    [self RLM_insertDone]; \
} \
-(TableName##Row*)addEmptyRow \
{ \
    return [[TableName##Row alloc] initWithTable:self ndx:[super RLM_addEmptyRow]]; \
} \
-(TableName##Row*)objectAtIndexedSubscript:(NSUInteger)ndx \
{ \
	return [[TableName##Row alloc] initWithTable:self ndx:ndx]; \
} \
-(TableName##Row*)objectForKeyedSubscript:(NSString *)key \
{ \
    if ([self columnCount] < 1) { \
        @throw [NSException exceptionWithName:@"realm:column_not_defined" \
                                       reason:@"This table has no columns" \
                                     userInfo:nil]; \
    } \
    else if ([self columnTypeOfColumnWithIndex:0] != RLMTypeString) { \
        @throw [NSException exceptionWithName:@"realm:column_not_type_string" \
                                       reason:@"Column at index 0 must be of RLMTypeString" \
                                     userInfo:nil]; \
    } \
    size_t ndx = [self RLM_lookup:key]; \
    return ndx != (NSUInteger)NSNotFound ? [self rowAtIndex:ndx] : nil; \
} \
-(TableName##Row*)rowAtIndex:(NSUInteger)ndx \
{ \
    return [[TableName##Row alloc] initWithTable:self ndx:ndx]; \
} \
-(TableName##Row*)rowAtLastIndex \
{ \
    return [[TableName##Row alloc] initWithTable:self ndx:self.rowCount-1]; \
} \
-(TableName##Row*)insertEmptyRowAtIndex:(NSUInteger)ndx \
{ \
    [super insertRow:nil atIndex:ndx]; \
    return [[TableName##Row alloc] initWithTable:self ndx:ndx]; \
} \
-(RLMRow*)getRow \
{ \
    return tmpRow = [[TableName##Row alloc] initWithTable:self ndx:0]; \
} \
+(BOOL)_checkType:(RLMDescriptor*)desc \
{ \
%for $j in range($num_cols)
    REALM_CHECK_COLUMN_TYPE(desc, ${j}, CName${j+1}, CType${j+1}) \
%end for
    return YES; \
} \
-(BOOL)_checkType \
{ \
    RLMDescriptor* desc = self.descriptor; \
    if (!desc) \
        return NO; \
    if (![TableName _checkType:desc]) \
        return NO; \
    return YES; \
} \
+(BOOL)_addColumns:(RLMDescriptor*)desc \
{ \
%for $j in range($num_cols)
    REALM_ADD_COLUMN(desc, CName${j+1}, CType${j+1}) \
%end for
    return YES; \
} \
-(BOOL)_addColumns \
{ \
    RLMDescriptor* desc = self.descriptor; \
    if (!desc) \
        return NO; \
    if (![TableName _addColumns:desc]) \
        return NO; \
    return YES; \
} \
@end \
@implementation TableName##View \
{ \
    TableName##Row* tmpRow; \
} \
-(RLMRow*)getRow \
{ \
    return tmpRow = [[TableName##Row alloc] initWithTable:self.originTable ndx:[self rowIndexInOriginTableForRowAtIndex:0]]; \
} \
-(TableName##Row*)rowAtIndex:(NSUInteger)ndx \
{ \
    return [[TableName##Row alloc] initWithTable:self.originTable ndx:[self rowIndexInOriginTableForRowAtIndex:ndx]]; \
} \
@end

#define REALM_TABLE_${num_cols}(TableName%slurp
%for $j in range($num_cols)
, CType${j+1}, CName${j+1}%slurp
%end for
) \
REALM_TABLE_DEF_${num_cols}(TableName%slurp
%for $j in range($num_cols)
, CType${j+1}, CName${j+1}%slurp
%end for
) \
REALM_TABLE_IMPL_${num_cols}(TableName%slurp
%for $j in range($num_cols)
, CType${j+1}, CName${j+1}%slurp
%end for
)
%end for
