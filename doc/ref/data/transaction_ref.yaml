#
# Obj-C reference documentation for RLMTransaction class
# Notice: this is a rename of Group
#

#INCONSISTENCY the parameters mode and take_ownership are not implemented in constructors
#UNIMPLEMENTED open() and is_attached()

#UNDOCUMENTED: [commit, to_json, get_table_typed]

ID         : class_transaction
TITLE      : RLMTransaction
SUMMARY    : A RLMTransaction is a fully ACID compliant access to tables.
DESCR      : >
             A RLMTransaction can only be created/initiated from a RLMContext (see {link class_shared_group}).
             By using RLMContext and RLMTransaction, you can access your data in multi-threaded applications. Moreover,
             a successful write transaction is sesameless persisted to your storage device.
SEE        :
EXAMPLES:
- DESCR    :
  CODE     : ex_objc_sharedgroup_intro
IGNORE     : []                   # List of method-ids to ignore
CATEGORIES:
- Table:
  METHODS:
  - g_group_is_empty:
      NAME     : "isEmpty"
      SUMMARY  : "Checks if the transaction has any tables"
      DESCR    : "Checks if the transaction has any tables. Returns <code>YES/NO</code>"
      SIGNATURE: "- (BOOL)isEmpty"
      RETURN:
        TYPES  : BOOL
        DESCR  : <code>YES</code> if there are no tables in the transaction, otherwise <code>NO</code>.
  - g_group_has_table:
      NAME     : "hasTableWithName:"
      SUMMARY  : *g_group_has_table_summary
      DESCR    : *g_group_has_table_descr
      SIGNATURE: "- (BOOL)hasTableWithName:(NSString *)name"
      PARAMS:
      - NAME   : name
        TYPES  : NSString *
        DESCR  : *g_group_has_table_parm1_descr
      - NAME   : obj
        TYPES  : Class
        DESCR  : Class type for compatibility test.
      RETURN:
        TYPES  : BOOL
        DESCR  : <code>YES</code> if the table exits, otherwise <code>NO</code>.
      EXAMPLES :
      - DESCR  :
        CODE   : ex_objc_group_optional_table
  - g_group_get_table:
      IGNORE   : ""
  - g_group_get_table_if_exists:
      NAMES    : "tableWithName:"
      SUMMARY  : *g_group_get_table_summary
      DESCR    : *g_group_get_table_descr
      SIGNATURE: |
                 - (RLMTable *)tableWithName:(NSString *)name
                 - (RLMTable *)tableWithName:(NSString *)name objectClass:(Class)obj
                 - (id)tableWithName:(NSString *)name asTableClass:(Class)obj
      PARAMS:
      - NAME   : name
        TYPES  : NSString
        DESCR  : *g_group_get_table_parm1_descr
      - NAME   : obj
        TYPES  : Class
        DESCR  : *g_group_get_table_parm2_descr
      RETURN:
        TYPES  : RLMTable *
        DESCR  : *g_group_get_table_return1_descr
      EXAMPLES:
      -  DESCR :
         CODE  : ex_objc_group_traverse
      -  DESCR :
         CODE  : ex_objc_group_optional_table
      SEE      : "{@link g_group_has_table}"
  - g_group_create_table:
      NAMES    : "createTableWithName:"
      SUMMARY  : Create table in context.
      DESCR    : Create table with the specified name in context. If a table already exists, an exception is thrown. 
                 Optionally specify object class to be used when accessing table rows
      SIGNATURE: |
                 - (RLMTable *)createTableWithName:(NSString *)name
                 - (RLMTable *)createTableWithName:(NSString *)name objectClass:(Class)objClass;
                 - (id)createTableWithName:(NSString *)name asTableClass:(Class)obj
      PARAMS:
      - NAME   : name
        TYPES  : NSString
        DESCR  : *g_group_get_table_parm1_descr
      - NAME   : obj
        TYPES  : Class
        DESCR  : *g_group_get_table_parm2_descr
      RETURN:
        TYPES  : RLMTable *
        DESCR  : *g_group_get_table_return1_descr
      EXAMPLES:
      -  DESCR :
         CODE  : ex_objc_group_traverse
      -  DESCR :
         CODE  : ex_objc_group_optional_table
      SEE      : "{@link g_group_has_table}"
