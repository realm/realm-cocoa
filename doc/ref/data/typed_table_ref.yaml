#
# Obj-C reference documentation for TypedTable class
#

#UNIMPLEMENTED columns(), front(), back(), insert_empty_row(), lookup(), findAll() 
#              via table Propery, get_sorted_view(), where(), distinct()
#INCONSISTENCY add.., addRow, vs. add_empty_row, and number of rows cannot be specified
#INCONSISTENCY popBack(), find_first_* ->> find*   ("first" is omitted)

ID         : class_typed_table
TITLE      : Table (typed)
SUMMARY    : *g_typed_table_summary             
DESCR      : *g_typed_table_descr
SEE        :                
EXAMPLES:
- DESCR    : 
  CODE     : ex_objc_table_typed_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES:
- Definition:
  METHODS:
  - g_typed_table_macros:
      NAME     : TIGHTDB_TABLE_*
      DESCR    : >
                 This set of predefined macros is used to declare type safe table classes.
                 It is possible to declare table classes with 1 to 15 columns.
      SIGNATURE: |
                 TIGHTDB_TABLE_*(ClassName,
                                 ColumnName, ColumnType
                                 ...)
      SUMMARY  : Declare type safe table classes.
      PARAMS:
      - NAME   : "*"
        TYPES  : text
        DESCR  : *g_typed_table_macros_parm1_descr
      - NAME   : ClassName
        TYPES  : text
        DESCR  : *g_typed_table_macros_parm2_descr
      - NAME   : ColumnName
        TYPES  : text
        DESCR  : *g_typed_table_macros_parm3_descr
      - NAME   : ColumnType
        TYPES  : text
# TODO: Fix types
        DESCR  : |
                 Column type. Following types are available:
                 <table>
                 <thead>
                 <tr><th>Name</th>              <th>Desc</th>         <th>C++ type</th></tr>
                 </thead>
                 <tbody>
                 <tr><td>Int</td>               <td>Integer</td>      <td>(int64_t)</td></tr>
                 <tr><td>Float</td>             <td>Floating-point</d><td>(float)</td></tr>
                 <tr><td>Double</td>            <td>Floating-point</d><td>(double)</td></tr>
                 <tr><td>Bool</td>              <td>Boolean</td>      <td>(BOOL)</td></tr>
                 <tr><td>String </td>           <td>Text</td>         <td>(NSString*)</td></tr>
                 <tr><td>Date</td>              <td>UTC datetime</td> <td>(time_t)</td></tr>
                 <tr><td>Mixed</td>             <td>Dynamic</td>      <td>(contains any of the above)</td></tr>
                 </tbody>
                 </table>

#                Not supported yet:
#                <tr><td>Enum&lt;T&gt;</td>     <td>Enum</td>         <td>(T as enum type)</td></tr>
#                <tr><td>Subtable&lt;T&gt;</td> <td>Sub-tables</td>   <td>(T as table class)</td></tr>

      EXAMPLES:
      - CODE   : ex_objc_typed_table_macros
        DESCR  :
        
- State:
  METHODS:
  - g_typed_table_is_empty:
      NAME     : isEmpty
      DESCR    : *g_typed_table_is_empty_descr
      SUMMARY  : *g_typed_table_is_empty_summary
      SIGNATURE: (BOOL)isEmpty;
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_typed_table_true_false
      EXAMPLES:
      - CODE   :  ex_objc_type_table_is_empty
        DESCR  :

  - g_typed_table_size:
      NAME     : count
      DESCR    : *g_typed_table_size_descr
      SUMMARY  : *g_typed_table_size_summary
      SIGNATURE: (size_t)count
      RETURN:
        TYPES  : size_t
        DESCR  : *g_typed_table_size_return1_descr
      EXAMPLES:
      - CODE   :  ex_objc_type_table_size
        DESCR  :


- Table:
  METHODS:
  - g_typed_table_clear:
      NAME     : clear
      SUMMARY  : *g_typed_table_clear_summary
      DESCR    : *g_typed_table_clear_descr
      SIGNATURE: (void)clear
      EXAMPLES:
      - CODE   : ex_objc_typed_table_clear
        DESCR  :

  - g_typed_table_optimize:
      NAME     : optimize
      SUMMARY  : *g_typed_table_optimize_summary
      DESCR    : *g_typed_table_optimize_descr
      SIGNATURE: (void)optimize
      EXAMPLES:
      - CODE   : ex_objc_typed_table_clear
        DESCR  :

# TODO?  - g_typed_table_columns:
# NOT - g_typed_table_columns_const:

  - g_typed_table_operator==:
      NAME     : isEqual
      SUMMARY  : *g_typed_table_operator_eq_summary
      DESCR    : *g_typed_table_operator_eq_descr
      SIGNATURE: (BOOL)isEqual:(TightdbTable *)other     
      PARAMS:
      - NAME   : other
        TYPES  : TightdbTable *
        DESCR  : *g_typed_table_operator_eq_parm1_descr
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_typed_table_operator_eq_return_descr
      EXAMPLES:
      - CODE   : ex_objc_typed_table_operator==
        DESCR  :

# TODO? - g_typed_table_operator!=:

# TODO: ColumnAccessor, RowAccessor ??

- Rows:
  METHODS:
# ??  - g_typed_table_operator_brackets:
# ?? - g_typed_table_operator_brackets_const:

# TODO:  - g_typed_table_front:
# TODO: - g_typed_table_front:

# TODO: g_typed_table_back
# TODO: g_typed_table_back_const:

  - g_typed_table_cursor_at_index:
      NAME     : cursorAtIndex
      SUMMARY  : Returns a typed cursor at a specified row number.
      DESCR    : &g_typed_table_cursor_at_index_descr
                 Use the curser to get or set the row values.
      SIGNATURE: "- (TableName_Cursor *)cursorAtIndex:(size_t)ndx"
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : The row number.
      RETURN:
        TYPES  : TableName_Cursor *
        DESCR  : The cursor object. Note that <code>TableName</code> is replaced with the name of your specific table.

  - g_typed_table_cursor_at_last_index:
      NAME     : cursorAtLastIndex
      SUMMARY  : Returns a typed curser at highest row number.
      DESCR    : *g_typed_table_cursor_at_index_descr
      SIGNATURE: "- (TableName_Cursor *)cursorAtLastIndex"
      RETURN:
        TYPES  : TableName_Cursor *
        DESCR  : The cursor object. Note that <code>TableName</code> is replaced with the name of your specific table.

  - g_typed_table_add:
      NAME     : "add*"
      SIGNATURE: RowAccesor add(value, ...)
      SUMMARY  : Adds new row containing the specified values.
      DESCR    : |
                 This method adds a new row to a typed table.
                 
                 The method is made available by a macro based on the table definition {@link g_typed_table_macros}. Note that the method name includes specific column names defined in the table definition. E.g. "CName1" will be replaced by the name of the first column in your table and so forth.
                 Please refer to the example below.
      SIGNATURE: (void)addCName1:(CType1*)value1 CName2:(CType2*)value2 CName3:(CType3*)value3
      PARAMS:
      - NAME   : "value1, value2, value3, &#133;"
        TYPES  : various
        DESCR  : *g_typed_table_values_for_all_columns_descr
      EXAMPLES:
      - CODE   : ex_objc_typed_table_add
        DESCR  :

  - g_typed_table_add_empty_row:
      NAME     : add # should be renamed to addRow to override addRow in dynamic API
      SUMMARY  : >
                 This method adds one empty row at the end of the table.
                 Default values (e.g. 0 or "") will be inserted for all the columns in the row.
      DESCR    : Add an empty row and returns a curser. You can use the curser to set the values.
      SIGNATURE: -(TableName_Cursor *)add;
      RETURN:
        TYPES  : TableName_Curser *
        DESCR  : Returns a typed curser. Note that <code>TableName</code> is replaced with the name of your typed table.
      EXAMPLES:
      - CODE   : ex_objc_typed_table_add_empty_row
        DESCR  :

  - g_typed_table_insert:
      NAME     : insertAtIndex*
      SIGNATURE: (void)insertAtIndex:(size_t)ndx CName1:(CType1*)value1 CName2:(CType2*)value2 CName3:(CType3*)value3
      SUMMARY  : *g_typed_table_insert_summary
      DESCR    : |
                 This method adds a new row to a typed table at a specified position.
                 The types of the parameters must match the types of the columns in the table definition.
                 The method is automatically made available by a macro taking as input the table definition {@link g_typed_table_macros}. Note that the method name includes specific column names defined in the table definition. E.g. "CName1" will be replaced by the name of the first column in your table and so forth.
                 Please refer to the example below.
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : *g_typed_table_insert_position_descr
      - NAME   : "value1, value2, value3, &#133;"
        TYPES  : various
        DESCR  : *g_typed_table_values_for_all_columns_descr
#TODO: Should it return a RowAccessor?
      EXAMPLES:
      - CODE   : ex_objc_typed_table_insert
        DESCR  :

# TODO: g_typed_table_insert_empty_row

  - g_typed_table_remove_row:
      NAMES    : remove
      SUMMARY  : *g_typed_table_remove_row_summary
      DESCR    : *g_typed_table_remove_row_descr
      SIGNATURE: (void)remove:(size_t)ndx
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : *g_typed_table_delete_position_descr
      EXAMPLES:
      - CODE   : ex_objc_typed_table_remove
        DESCR  :

  - g_typed_table_remove_last_row:
      NAMES    : removeLast
      SUMMARY  : *g_typed_table_remove_last_row_summary
      DESCR    : *g_typed_table_remove_last_row_descr
      SIGNATURE: (void)removeLast
      EXAMPLES:
      - CODE   : ex_objc_typed_table_remove_last_row
        DESCR  :

- Searching:
  METHODS:
  # TODO: g_typed_table_lookup:

  - g_typed_table_find_first_bool:
  - g_typed_table_find_first_int:
  - g_typed_table_find_first_float:
  - g_typed_table_find_first_double:
  - g_typed_table_find_first_date:
  - g_typed_table_find_first_string:
      NAMES    : [find, find, find, find, find, find]
      TITLE    : "*find"
      SUMMARY  : *g_typed_table_find_first_xxx_summary
      DESCR    : |
                 The method finds the first occurence of a given value in a column.
                 The method is automatically made available by a macro taking as input the table definition {@link g_typed_table_macros}. The method can only be accessed through a property of the table object. The property <code>CName</code> represents the column to be searched. The type of <code>value</code> must correspond type of the column being accessed. Refer also to the example below.
      SIGNATURE: ".CName (size_t)find: (CType*)value"
      PARAMS:
      - NAME   : value
        TYPES  : [BOOL, int64_t, float, double, time_t, NSString *]
        DESCR  : *g_typed_table_lookup_parm1_descr
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>TBD</code> (equal to <code>size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_objc_typed_table_find_first_xxx
        DESCR  :

  - g_typed_table_where:
  
      NAMES    : where
      SIGNATURE: (TableName_Query *)where;
      SUMMARY  : *g_typed_table_where_summery
      DESCR    : This method initiates a query. See {@link class_typed_query}.
      RETURN:
        TYPES  : TableName_Query
        DESCR  : The query object. Note that <code>TableName</code> is replaced with the name of your specific table.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_table_where

# - g_typed_table_where_const:

# TODO: 
#  - g_typed_table_find_all_bool:
#  - g_typed_table_find_all_int:
#  - g_typed_table_find_all_float:
#  - g_typed_table_find_all_double:
#  - g_typed_table_find_all_date:
#  - g_typed_table_find_all_string:
#  - g_typed_table_find_all_bool_const:
#  - g_typed_table_find_all_float_const:
#  - g_typed_table_find_all_double_const:
#  - g_typed_table_find_all_int_const:
#  - g_typed_table_find_all_date_const:
#  - g_typed_table_find_all_string_const:

#  - g_typed_table_get_sorted_view:
#  - g_typed_table_get_sorted_view_const:

#  - g_typed_table_distinct:
#  - g_typed_table_distinct_const:






