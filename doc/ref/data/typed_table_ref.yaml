#
# Obj-C reference documentation for TypedTable class
#

#UNIMPLEMENTED columns(), front(), back(), insert_empty_row(), lookup(), findAll()
#              via table Propery, get_sorted_view(), where(), distinct()
#INCONSISTENCY add.., number of rows cannot be specified
#INCONSISTENCY popBack(), find_first_* ->> find*   ("first" is omitted)

ID         : class_typed_table
TITLE      : RLMTable (typed)
SUMMARY    : *g_typed_table_summary
DESCR      : >
             NOTE: The current documentation of Typed Table is under construction,
             and not completely correct yet.

             The <code>RLMTable</code> class is the core class of the Realm framework. It allows you
             to efficiently work with data in terms of rows and columns. The value of
             a cell (specific column, specific row) is compacted in order to keep the
             overall memory consumption as little as possible. The internal data structure
             is optimized so retrieving a particular row in a table is as fast as possible
             (often faster than native data structures).

             When the number and types of columns are known a priori, you can use a set of macros
             to define type safe and efficient table classes. The compiler can take avantage of
             a typed table and enforce type checking of the methods parameters at compile time.

             The aim of the Realm table class is that it feels as close to the native data
             structures (in particular arrays) as possible.
SEE        :
EXAMPLES:
- DESCR    :
  CODE     : ex_objc_table_typed_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES:
- Definition:
  METHODS:
  - g_typed_table_macros:
      NAME     : REALM_TABLE_*
      DESCR    : >
                 This set of predefined macros is used to declare type safe classes. One macro
                 will be expanded to classes for tables, rows, queries, and views.
                 It is possible to declare table classes with 1 to 15 columns. It is important
                 to observe that these macros expand to actual Objective C classes. You must
                 use these macros at the outer-most scope.

                 The class name (<code>ClassName</code> below) is used as prefix for the class names. The
                 name of the table class is the same as the class name, while the row class is named
                 <i>ClassName</i>Row, the query class is <i>ClassName</i>Query, and the view class is
                 <i>ClassName</i>View.

                 If you need to use the classes in
                 more than one source code file (<code>.m</code>), you can declare the class'
                 interface using the REALM_TABLE_DEF_* macros in a header file (<code>.h</code>)
                 and include this header file in source code file where you use the class. Moreover,
                 the implementation part of the classes must be placed in a separate <code>.m</code>
                 using the REALM_TABLE_IMPL_* macros.

      SIGNATURE: |
                 REALM_TABLE_*(ClassName,
                                 ColumnName, ColumnType
                                 ...)
      SUMMARY  : Declare type safe table classes.
      PARAMS:
      - NAME   : "*"
        TYPES  : text
        DESCR  : *g_typed_table_macros_parm1_descr
      - NAME   : ClassName
        TYPES  : text
        DESCR  : *g_typed_table_macros_parm2_descr
      - NAME   : ColumnName
        TYPES  : text
        DESCR  : *g_typed_table_macros_parm3_descr
      - NAME   : ColumnType
        TYPES  : text
# TODO: Fix types
        DESCR  : |
                 Column type. Following types are available:
                 <table>
                 <thead>
                 <tr><th>Name</th>              <th>Desc</th>         <th>C++ type</th></tr>
                 </thead>
                 <tbody>
                 <tr><td>RLMTypeInt</td>               <td>Integer</td>      <td>(int64_t)</td></tr>
                 <tr><td>RLMTypeFloat</td>             <td>Floating-point</d><td>(float)</td></tr>
                 <tr><td>RLMTypeDouble</td>            <td>Floating-point</d><td>(double)</td></tr>
                 <tr><td>RLMTypeBool</td>              <td>Boolean</td>      <td>(BOOL)</td></tr>
                 <tr><td>RLMTypeString</td>            <td>Text</td>         <td>(NSString*)</td></tr>
                 <tr><td>RLMTypeDate</td>              <td>UTC datetime</td> <td>(time_t)</td></tr>
                 <tr><td>RLMTypeMixed</td>             <td>Dynamic</td>      <td>(contains any of the above)</td></tr>
                 </tbody>
                 </table>

#                Not supported yet:
#                <tr><td>Enum&lt;T&gt;</td>     <td>Enum</td>         <td>(T as enum type)</td></tr>
#                <tr><td>Subtable&lt;T&gt;</td> <td>Sub-tables</td>   <td>(T as table class)</td></tr>

      EXAMPLES:
      - CODE   : ex_objc_table_typed_intro
        DESCR  :

- State:
  METHODS:
  - g_typed_table_is_empty:
      IGNORE   : ""
      NAME     : isEmpty
      DESCR    : *g_typed_table_is_empty_descr
      SUMMARY  : *g_typed_table_is_empty_summary
      SIGNATURE: (BOOL)isEmpty;
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_typed_table_true_false
      EXAMPLES:
      - CODE   :  ex_objc_type_table_is_empty
        DESCR  :

  - g_typed_table_size:
      NAME     : rowCount
      DESCR    : *g_typed_table_size_descr
      SUMMARY  : *g_typed_table_size_summary
      SIGNATURE: "@property (nonatomic, readonly) NSUInteger rowCount"
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_typed_table_size_return1_descr
      EXAMPLES:
      - CODE   :  ex_objc_type_table_size
        DESCR  :


- Table:
  METHODS:
  - g_typed_table_clear:
      NAME     : removeAllRows
      SUMMARY  : *g_typed_table_clear_summary
      DESCR    : *g_typed_table_clear_descr
      SIGNATURE: (void)removeAllRows
      EXAMPLES:
      - CODE   : ex_objc_typed_table_clear
        DESCR  :

  - g_typed_table_optimize:
      NAME     : optimize
      SUMMARY  : *g_table_optimize_summary
      DESCR    : *g_table_optimize_descr
      SIGNATURE: (void)optimize
      EXAMPLES:
      - CODE   : ex_objc_typed_table_clear
        DESCR  :

# TODO?  - g_typed_table_columns:
# NOT - g_typed_table_columns_const:

  - g_typed_table_operator==:
      NAME     : isEqual
      SUMMARY  : *g_typed_table_operator_eq_summary
      DESCR    : *g_typed_table_operator_eq_descr
      SIGNATURE: (BOOL)isEqual:(RLMTable *)other
      PARAMS:
      - NAME   : other
        TYPES  : RLMTable *
        DESCR  : *g_typed_table_operator_eq_parm1_descr
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_typed_table_operator_eq_return_descr
      EXAMPLES:
      - CODE   : ex_objc_typed_table_operator==
        DESCR  :

# TODO? - g_typed_table_operator!=:

# TODO: ColumnAccessor, RowAccessor ??

- Rows:
  METHODS:
# ??  - g_typed_table_operator_brackets:
# ?? - g_typed_table_operator_brackets_const:

# TODO:  - g_typed_table_front:
# TODO: - g_typed_table_front:

# TODO: g_typed_table_back
# TODO: g_typed_table_back_const:

  - g_typed_table_cursor_at_index:
      NAME     : rowAtIndex
      SUMMARY  : Returns a typed row at a specified row index.
      DESCR    : &g_typed_table_cursor_at_index_descr
                 Use the row to get or set the row values.
      SIGNATURE: "- (<i>ClassName</i>Row *)rowAtIndex:(NSUInteger)rowIndex"
      PARAMS:
      - NAME   : rowIndex
        TYPES  : NSUInteger
        DESCR  : The row index.
      RETURN:
        TYPES  : <i>ClassName</i>Row *
        DESCR  : The row object. Note that <i>ClassName</i> is replaced with the name of your specific table.

  - g_typed_table_cursor_at_last_index:
      NAME     : lastRow
      SUMMARY  : Returns a typed row at highest row index.
      DESCR    : *g_typed_table_cursor_at_index_descr
      SIGNATURE: (<i>ClassName</i>Row *)lastRow
      RETURN:
        TYPES  : <i>ClassName</i>Row *
        DESCR  : The row object. Note that <i>ClassName</i> is replaced with the name of your specific table.

  - g_typed_table_add:
      TODO     : OBSOLETE
      NAME     : "add* {obsolete}"
      SIGNATURE: RowAccesor add(value, ...)
      SUMMARY  : Adds new row containing the specified values.
      DESCR    : |
                 This method adds a new row to a typed table.

                 The method is made available by a macro based on the table definition {@link g_typed_table_macros}.
                 Note that the method name includes specific column names defined in the table definition.
                 For example "CName1" will be replaced by the name of the first column in your table and so forth.
                 Moreover, if the first column is named "age", the method is <code>addage</code>. That is, the name of
                 method is a simply concatenation of "add" and the name of the first column.
      SIGNATURE: (void)addCName1:(CType1*)value1 CName2:(CType2*)value2 CName3:(CType3*)value3
      PARAMS:
      - NAME   : "value1, value2, value3, &#133;"
        TYPES  : various
        DESCR  : *g_typed_table_values_for_all_columns_descr
      EXAMPLES:
      - CODE   : ex_objc_typed_table_add
        DESCR  :

  - g_typed_table_add_empty_row:
      TODO     : never
      NAME     : addEmptyRow
      SUMMARY  : &objc_typed_table_add_empty_row_summary
                 Adds an empty row and returns a cursor. You can use the cursor to get or set the values.
      DESCR    : &objc_typed_table_add_empty_row_descr
                 This method adds one empty row at the end of the table.
                 Default values (e.g. 0 or "") will be inserted for all the columns in the row.
      SIGNATURE: -(TableName_Cursor *)addEmptyRow;
      RETURN:
        TYPES  : TableName_Cursor *
        DESCR  : Returns a typed cursor at the added row. Note that <code>TableName</code> is replaced with the name of your typed table.
      EXAMPLES:
      - CODE   : ex_objc_typed_table_add_empty_row
        DESCR  :

  - objc_dyn_table_insert_object:
      NAME     : "insertRow:atIndex:"
      SUMMARY  : Insert a row.
      DESCR    : >
                 This method will insert a row in the table at a particular
                 position. The row is represented as an <code>NSObject</code>,
                 an <code>NSArray</code>, or an <code>NSDictionary</code>.

                 For the <code>NSArray</code> and <code>NSDictionary</code> cases, the type of
                 the elements are validated before creating the
                 new row. If <i>data</i> is <code>nil</code>, an empty row
                 with default values is appended.

                 If <i>data</i> is <code>nil</code>, an empty row
                 with default values is inserted.

                 Properties in generic objects
                 (derived from <code>NSObject</code>) which match column names
                 will be used. Non-matching properties are ignored.
      SIGNATURE: (void)insertRow:(id)anObject atRowIndex:(NSUInteger)rowIndex
      PARAMS:
      - NAME    : anObject
        TYPES   : id
        DESCR   : The row either as an <code>NSArray</code>, <code>NSDictionary</code> or a generic <code>NSObject</code>. A <code>nil</code> implies that a row of default values is inserted.
      - NAME    : rowIndex
        TYPES   : NSUInteger
        DESCR   : *g_dyn_table_insert_empty_row_parm1_descr

  - objc_dyn_table_set_object:
      NAME     : "setRow:atIndex:"
      SUMMARY  : Sets a row.
      DESCR    : >
                 This method will set a row in the table at the specified index with <code>anObject</code>. If anObject is <code>nil</code>, the row gets removed. Properties in generic objects (derived from <code>NSObject</code>) 
                 which match columns names will be used. Non-matching properties are ignored. An exception is thrown if passing an index that is out of bounds.
      SIGNATURE: (void)insertRow:(id)anObject atRowIndex:(NSUInteger)rowIndex
      PARAMS:
      - NAME    : anObject
        TYPES   : id
        DESCR   : The row either as an <code>NSArray</code>, <code>NSDictionary</code> or a generic <code>NSObject</code>. A <code>nil</code> implies that a row of default values is inserted.
      - NAME    : rowIndex
        TYPES   : NSUInteger
        DESCR   : *g_dyn_table_insert_empty_row_parm1_descr

  - objc_dyn_table_append_row:
      NAME     : "addRow:"
      SUMMARY  : Append a row using object literals.
      DESCR    : >
                 This method will append (add at the end) a row to a table.
                 The row is represented as an <code>NSObject</code>,
                 an <code>NSArray</code>, or an <code>NSDictionary</code>.

                 For the <code>NSArray</code> and <code>NSDictionary</code> cases, the type of
                 the elements are validated before creating the
                 new row. If <i>data</i> is <code>nil</code>, an empty row
                 with default values is appended.

                 Properties in generic objects
                 (derived from <code>NSObject</code>) which match column names
                 will be used.
      SIGNATURE: (void)addRow:(NSObject *)data
      PARAMS:
      - NAME   : data
        TYPES  : NSObject *
        DESCR  : The row either as an <code>NSArray</code>, <code>NSDictionary</code>, or a generic <code>NSObject</code>. A <code>nil</code> value implies that a row of default values will be appended.

  - g_typed_table_insert:
      TODO     : OBSOLETE
      NAME     : "insertAtIndex* {obsolete}"
      SIGNATURE: (void)insertAtIndex:(NSUInteger)ndx CName1:(CType1*)value1 CName2:(CType2*)value2 CName3:(CType3*)value3
      SUMMARY  : *g_typed_table_insert_summary
      DESCR    : |
                 This method adds a new row to a typed table at a specified position.
                 The types of the parameters must match the types of the columns in the table definition.
                 The method is automatically made available by a macro taking as input the table definition {@link g_typed_table_macros}. Note that the method name includes specific column names defined in the table definition. E.g. "CName1" will be replaced by the name of the first column in your table and so forth.
                 Please refer to the example below.
      PARAMS:
      - NAME   : ndx
        TYPES  : NSUInteger
        DESCR  : *g_typed_table_insert_position_descr
      - NAME   : "value1, value2, value3, &#133;"
        TYPES  : various
        DESCR  : *g_typed_table_values_for_all_columns_descr
#TODO: Should it return a RowAccessor?
      EXAMPLES:
      - CODE   : ex_objc_typed_table_insert
        DESCR  :

# TODO: g_typed_table_insert_empty_row

  - g_typed_table_remove_row:
      NAMES    : removeRowAtIndex
      SUMMARY  : *g_typed_table_remove_row_summary
      DESCR    : *g_typed_table_remove_row_descr
      SIGNATURE: (void)removeRowAtIndex:(NSUInteger)rowIndex
      PARAMS:
      - NAME   : rowIndex
        TYPES  : NSUInteger
        DESCR  : *g_typed_table_delete_position_descr
      EXAMPLES:
      - CODE   : ex_objc_typed_table_remove
        DESCR  :

  - g_typed_table_remove_last_row:
      NAMES    : removeLastRow
      SUMMARY  : *g_typed_table_remove_last_row_summary
      DESCR    : *g_typed_table_remove_last_row_descr
      SIGNATURE: (void)removeLastRow
      EXAMPLES:
      - CODE   : ex_objc_typed_table_remove_last_row
        DESCR  :

- Searching:
  METHODS:
  # TODO: g_typed_table_lookup:

  #- g_typed_table_find_first_bool:
  #- g_typed_table_find_first_int:
  #- g_typed_table_find_first_float:
  #- g_typed_table_find_first_double:
  #- g_typed_table_find_first_date:
  #- g_typed_table_find_first_string:
  #    NAMES    : [find, find, find, find, find, find]
  #    TITLE    : "*find"
  #    SUMMARY  : *g_typed_table_find_first_xxx_summary
  #    DESCR    : |
  #               The method finds the first occurence of a given value in a column.
  #               The method is automatically made available by a macro taking as input the table definition {@link g_typed_table_macros}. The method can only be accessed through a property of the table object. The property <code>CName</code> represents the column to be searched. The type of <code>value</code> must correspond type of the column being accessed. Refer also to the example below.
  #    SIGNATURE: ".CName (NSUInteger)find: (CType*)value"
  #    PARAMS:
  #    - NAME   : value
  #      TYPES  : [BOOL, int64_t, float, double, time_t, NSString *]
  #      DESCR  : *g_typed_table_lookup_parm1_descr
  #    RETURN:
  #      TYPES  : NSUInteger
  #      DESCR  : "The row index or <code>NSNotFound</code> if there is no match."
  #    EXAMPLES:
  #    - CODE   : ex_objc_typed_table_find_first_xxx
  #      DESCR  :

  - g_typed_table_where:
      NAMES    : where
      SIGNATURE: (ClassNameQuery *)where;
      SUMMARY  : *g_typed_table_where_summary
      DESCR    : This method initiates a query. See {@link class_typed_query}.
      RETURN:
        TYPES  : <i>ClassName</i>Query
        DESCR  : The query object. Note that <i>ClassName</i> is replaced with the name of your specific table.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_typed_table_where

- Aggregates:
  METHODS:
  - g_typed_table_sum:
      TODO: soon (+ start, end, limit)
  - g_typed_table_sum_float:
      TODO: soon (+ start, end, limit)
  - g_typed_table_sum_double:
      TODO: soon (+ start, end, limit)
  - g_typed_table_sum_2:
      NAME     : sum
  - g_typed_table_sum_float_2:
      NAME     : sum
  - g_typed_table_sum_double_2:
      NAME     : sum
      TITLE    : sum
      DESCR    : *g_typed_query_sum_descr
      SUMMARY  : *g_typed_query_sum_summary
      SIGNATURE: |
                 .columnName (NSNumber *)sum
      RETURN:
        TYPES  : NSNumber *
        DESCR  : *g_typed_query_sum_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_table_query_sum

  - g_typed_table_maximum:
      TODO: soon (+ start, end, limit)
  - g_typed_table_maximum_float:
      TODO: soon (+ start, end, limit)
  - g_typed_table_maximum_double:
      TODO: soon (+ start, end, limit)
  - g_typed_table_maximum_date:
      TODO: soon (+ start, end, limit)
  - g_typed_table_maximum_date:
      TODO: soon
  - g_typed_table_maximum_2:
      NAME     : max
  - g_typed_table_maximum_float_2:
      NAME     : max
  - g_typed_table_maximum_double_2:
      NAME     : max
      TITLE    : max
      DESCR    : *g_typed_query_maximum_descr
      SUMMARY  : *g_typed_query_maximum_summary
      SIGNATURE: |
                 .columnName (int64_t)max
                 .columnName (float)max
                 .columnName (double)max
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : *g_typed_query_maximum_return1_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_typed_query_maximum

  - g_typed_table_minimum:
      TODO: soon (+ start, end, limit)
  - g_typed_table_minimum_float:
      TODO: soon (+ start, end, limit)
  - g_typed_table_minimum_double:
      TODO: soon (+ start, end, limit)
  - g_typed_table_minimum_date:
      TODO: soon (+ start, end, limit)
  - g_typed_table_minimum_date:
      TODO: soon
  - g_typed_table_minimum_2:
      NAME     : min
  - g_typed_table_minimum_float_2:
      NAME     : min
  - g_typed_table_minimum_double_2:
      NAME     : min
      TITLE    : min
      DESCR    : *g_typed_query_minimum_descr
      SUMMARY  : *g_typed_query_minimum_summary
      SIGNATURE: |
                 .columnName (int64_t)min
                 .columnName (float)min
                 .columnName (double)min
      RETURN:
        TYPES  : [NSNumber, NSDate]
        DESCR  : *g_typed_query_minimum_return1_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_typed_query_minimum

  - g_typed_table_average:
      TODO: soon (+ start, end, limit)
  - g_typed_table_average_float:
      TODO: soon (+ start, end, limit)
  - g_typed_table_average_double:
      TODO: soon (+ start, end, limit)
  - g_typed_table_average_2:
      NAME     : avg
  - g_typed_table_average_float_2:
      NAME     : avg
  - g_typed_table_average_double_2:
      NAME     : avg
      TITLE    : avg
      SUMMARY  : *g_typed_query_average_summary
      DESCR    : *g_typed_query_average_descr
      SIGNATURE: .columnName (double)avg
      RETURN:
        TYPES  : double
        DESCR  : *g_typed_query_average_return1_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_typed_query_average
# - g_typed_table_where_const:

# TODO:
#  - g_typed_table_find_all_bool:
#  - g_typed_table_find_all_int:
#  - g_typed_table_find_all_float:
#  - g_typed_table_find_all_double:
#  - g_typed_table_find_all_date:
#  - g_typed_table_find_all_string:
#  - g_typed_table_find_all_bool_const:
#  - g_typed_table_find_all_float_const:
#  - g_typed_table_find_all_double_const:
#  - g_typed_table_find_all_int_const:
#  - g_typed_table_find_all_date_const:
#  - g_typed_table_find_all_string_const:

#  - g_typed_table_get_sorted_view:
#  - g_typed_table_get_sorted_view_const:

#  - g_typed_table_distinct:
#  - g_typed_table_distinct_const:
