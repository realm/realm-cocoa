#
# Obj-C reference documentation for TypedTable class
#

#UNIMPLEMENTED columns(), front(), back(), insert_empty_row(), lookup(), findAll() via table Propery, get_sorted_view(), where(), distinct()
#INCONSISTENCY add.., addRow, vs. add_empty_row, and number of rows cannot be specified
#INCONSISTENCY popBack(), find_first_* ->> find*   ("first" is omitted)

ID         : class_typed_table
TITLE      : Table (typed)
SUMMARY    : *g_typed_table_summary             
DESCR      : *g_typed_table_descr
SEE        :
EXAMPLES:
- DESCR    :
  CODE     : ex_cpp_typed_table_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES:
- Definition:
  METHODS:
  - g_typed_table_macros:
      NAMES    : TIGHTDB_TABLE_*
      DESCR    : >
                 This set of predefined macros is used to declare type safe table classes.
                 It is possible to declare table classes with 1 to 15 columns.
      SIGNATURE: |
                 TIGHTDB_TABLE_*(ClassName,
                                 ColumnName, ColumnType
                                 ...)
      SUMMARY  : Declare type safe table classes.
      PARAMS:
      - NAME   : "*"
        TYPES  : text
        DESCR  : "Number of columns in table (range: 1 to 15)."
      - NAME   : ClassName
        TYPES  : text
        DESCR  : Name of the new class.
      - NAME   : ColumnName
        TYPES  : text
        DESCR  : Name of column.
      - NAME   : ColumnType
        TYPES  : text
        DESCR  : |
                 Column type. Following types are available:
                 <table>
                 <thead>
                 <tr><th>Name</th>              <th>Desc</th>         <th>C++ type</th></tr>
                 </thead>
                 <tbody>
                 <tr><td>Int</td>               <td>Integer</td>      <td>(int64_t)</td></tr>
                 <tr><td>Float</td>             <td>Floating-point</d><td>(float)</td></tr>
                 <tr><td>Double</td>            <td>Floating-point</d><td>(double)</td></tr>
                 <tr><td>Bool</td>              <td>Boolean</td>      <td>(bool)</td></tr>
                 <tr><td>String </td>           <td>Text</td>         <td>(char*)</td></tr>
                 <tr><td>Date</td>              <td>UTC datetime</td> <td>(time_t)</td></tr>
                 <tr><td>Enum&lt;T&gt;</td>     <td>Enum</td>         <td>(T as enum type)</td></tr>
                 <tr><td>Subtable&lt;T&gt;</td> <td>Sub-tables</td>   <td>(T as table class)</td></tr>
                 <tr><td>Mixed</td>             <td>Dynamic</td>      <td>(contains any of the above)</td></tr>
                 </tbody>
                 </table>
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_macros
        DESCR  :
- State:
  METHODS:
  - g_typed_table_is_empty:
      NAMES    : isEmpty
      DESCR    : *g_typed_table_is_empty_descr
      SUMMARY  : *g_typed_table_is_empty_summary
      SIGNATURE: |
                 (BOOL)isEmpty;
      CONST    : true
      RETURN:
        TYPES  : bool
        DESCR  : *g_typed_table_true_false
      EXAMPLES:
      - CODE   :  ex_cpp_type_table_is_empty
        DESCR  :
  - g_typed_table_size:
      NAMES    : count
      DESCR    : *g_typed_table_size_descr
      SUMMARY  : *g_typed_table_size_summary
      SIGNATURE: |
                 (size_t)count
      RETURN:
        TYPES  : size_t
        DESCR  : Number of rows in table.
      EXAMPLES:
      - CODE   :  ex_cpp_type_table_size
        DESCR  :
- Table:
  METHODS:
  - g_typed_table_clear:
      NAMES    : clear
      SUMMARY  : *g_typed_table_clear_summary
      DESCR    : *g_typed_table_clear_descr
      SIGNATURE: |
                 (void)clear;
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_clear
        DESCR  : 
  - g_typed_table_optimize:
      NAMES    : optimize
      SUMMARY  : *g_typed_table_optimize_summary
      DESCR    : *g_typed_table_optimize_descr
      SIGNATURE: |
                 (void)optimize
  - g_dyn_table_opertator==:
      NAMES    : isEqual
      SUMMARY  : *g_typed_table_operator_eq_summary
      DESCR    : *g_typed_table_operator_eq_descr
      SIGNATURE: |
                 (BOOL)isEqual:(TightdbTable *)other     
      PARAMS:
      - NAME   : other
        TYPES  : TightdbTable
        DESCR  : The other table.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if the two tables are equal, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_operator==
        DESCR  :
- Rows:
  METHODS:
  - g_typed_table_add:
      NAMES    : add*
      SIGNATURE: |
                 RowAccesor add(value, ...)
      SUMMARY  : Add new row.
      DESCR    : This method adds a new row to a typed table. <br> <br> The method is made available by a macro based on the table definition {@link g_typed_table_macros}. Note that the method name includes specific column names defined in the table definition. E.g. "CName1" will be replaced by the name of the first column in your table and so forth. Please refer to the example below.
      SIGNATURE: |
                 (void)addCName1:(CType1*)value1 CName2:(CType2*)value2 CName3:(CType3*)value3
      PARAMS:
      - NAME   : "value1, value2, value3, &#133;"
        TYPES  : various
        DESCR  : Values for all columns in the row.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_add
        DESCR  :
  - g_typed_table_add_empty_row:
      NAMES    : addRow
      SUMMARY  : This method will add one or more empty rows at the end of the table.
      DESCR    : Add an empty row.
      SIGNATURE: |
                 (size_t)addRow     
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_add_empty_row
        DESCR  :
  - g_typed_table_insert:
      NAMES    : insert*
      SIGNATURE: |
                 (void)insertAtIndex:(size_t)ndx CName1:(CType1*)value1 CName2:(CType2*)value2 CName3:(CType3*)value3
      SUMMARY  : Insert a new row at a specified position.
      DESCR    : This method adds a new row to a typed table at a specified position. <br> <br> This method is automatically made available by a macro taking as input the table definition {@link g_typed_table_macros}. Note that the method name includes specific column names defined in the table definition. E.g. "CName1" will be replaced by the name of the first column in your table and so forth. Please refer to the example below.
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : Insert position.
      - NAME   : "value1, value2, value3, &#133;"
        TYPES  : various
        DESCR  : Values for all columns in the row.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_insert
        DESCR  :
  - g_typed_table_remove_row:
      NAMES    : remove
      SUMMARY  : *g_typed_table_remove_row_summary
      DESCR    : *g_typed_table_remove_row_descr
      SIGNATURE: (void)delete:(size_t)ndx
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : Position of row to delete.
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_remove
        DESCR  :
  - g_typed_table_remove_last_row:
      NAMES    : popBack
      SUMMARY  : *g_typed_table_remove_last_row_summary
      DESCR    : *g_typed_table_remove_last_row_descr
      SIGNATURE: (void)popBack
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_remove_last_row
        DESCR  :
- Searching:
  METHODS:
  - g_find_first_bool:
  - g_find_first_int:
  - g_find_first_float:
  - g_find_first_double:
  - g_find_first_date:
  - g_find_first_string:
      NAMES    : find*
      SUMMARY  : *g_find_first_xxx_summary
      DESCR    : The method finds the first occurence of a given value in a column. <br> <br> This method is automatically made available by a macro taking as input the table definition {@link g_typed_table_macros}. The method can only be accessed through a property of the table object. The property <code>CName</code> represents the column to be searched. The type of <code>value</code> must correspond type of the column being accessed. Refer also to the example below.
      SIGNATURE: |
                 .CName (size_t)find: (CType*)value
      CONST    : True
      PARAMS:
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*]
        DESCR  : The value.
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_typed_table_find_first_xxx
        DESCR  :
