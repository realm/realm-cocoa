#
# Obj-C reference documentation for RLMRealm class
# Notice: this is a rename of Group
#

#INCONSISTENCY the parameters mode and take_ownership are not implemented in constructors
#UNIMPLEMENTED open() and is_attached()

#UNDOCUMENTED: [commit, to_json, get_table_typed]

ID         : class_realm
TITLE      : RLMRealm
SUMMARY    : RLMRealm is a class that provides fully ACID compliant access to tables.
DESCR      : >
             RLMRealm objects are used for writing or reading tables. These tables are persisted to disk, 
             and changes to the tables are done through explicit transactions within write blocks on a transaction manager.
             Implicit transactions are updated at intervals of the runloop cycle only when there are new changes 
             available. This implies that an update to a table is either stored or will fail, and the realm
             is thereby always consistent. See @{link class_group} for details on realms.

             Realm objects can either be created independently, or by an RLMTransactionManager's write/read block.

             Using a realm, you can access your data within the main thread of your application, without the need
             to use a transaction manager. The file format used by Realm can be used on any platform, 
             and data can be accessed by any language Realm supports.
SEE        :
EXAMPLES:
- DESCR    :
  CODE     : ex_objc_realm_intro
IGNORE     : []                   # List of method-ids to ignore
CATEGORIES:
- Constructor:
  METHODS:
  - g_realm_constructor_default_path:
      NAME     : "defaultRealm"
      SUMMARY  : &g_realm_constructor_summary
                 >
                 Creates a stand-alone RLMRealm with optional initialization block
      DESCR    :
      - TEXT   : &g_realm_constructor_descr
                 >
                 Creates a stand-alone RLMRealm that lives outside any explicit RLMTransactionManager.
                 Can only be called on the main thread. Runs an optional initialization block on a
                 writable realm before returning.
      SIGNATURE: |
                 "+ (instancetype)defaultRealm"
                 "+ (instancetype)defaultRealmWithInitBlock:(RLMWriteBlock)initBlock"
      PARAMS:
      - NAME   : initBlock
        TYPES  : RLMWriteBlock
        DESCR  : &g_write_block_param_descr
                 >
                 A block of code. The block can modify the tables or add new tables in a
                 transactional manner.
      RETURN:
        TYPES  : RLMRealm
        DESCR  : A realm mapped to a file at the default path.
      EXAMPLES:
      - CODE   : ex_objc_realm_intro
        DESCR  :
  - g_realm_constructor:
      NAME     : "realmWithPersistenceToFile:"
      SUMMARY  : *g_realm_constructor_summary
      DESCR    :
      - TEXT   : *g_realm_constructor_descr
      SIGNATURE: |
                 "+ (instancetype)realmWithPersistenceToFile:(NSString *)path"
                 "+ (instancetype)realmWithPersistenceToFile:(NSString *)path initBlock:(RLMWriteBlock)initBlock"
      PARAMS:
      - NAME   : path
        TYPES  : NSString
        DESCR  : &g_realm_path_param_descr
                 >
                 A path to a file. E.g. documents-folder/myDatabase.realm
      - NAME   : initBlock
        TYPES  : RLMWriteBlock
        DESCR  : *g_write_block_param_descr
      RETURN:
        TYPES  : RLMRealm
        DESCR  : A realm mapped to a file at the specified path.
      EXAMPLES:
      - CODE   : ex_objc_realm_intro
        DESCR  :
  - g_realm_constructor_with_arguments:
      NAME     : "realmWithPersistenceToFile:runLoop:notificationCenter:error:"
      SUMMARY  : *g_realm_constructor_summary
      DESCR    :
      - TEXT   : >
                 Creates a stand-alone RLMRealm that lives outside any explicit RLMTransactionManager.
                 Can be called from any thread. Runs an optional initialization block on a
                 writable realm before returning.
      SIGNATURE: |
                 "+ (instancetype)realmWithPersistenceToFile:(NSString *)path runLoop:(NSRunLoop *)runLoop notificationCenter:(NSNotificationCenter *)notificationCenter error:(NSError **)error"
                 "+ (instancetype)realmWithPersistenceToFile:(NSString *)path initBlock:(RLMWriteBlock)initBlock runLoop:(NSRunLoop *)runLoop notificationCenter:(NSNotificationCenter *)notificationCenter error:(NSError **)error"
      PARAMS:
      - NAME   : path
        TYPES  : NSString
        DESCR  : *g_realm_path_param_descr
      - NAME   : initBlock
        TYPES  : RLMWriteBlock
        DESCR  : *g_write_block_param_descr
      - NAME   : runLoop
        TYPES  : NSRunLoop
        DESCR  : "The run loop on which implicit transactions will by synced. E.g. [NSRunLoop mainRunLoop]"
      - NAME   : notificationCenter
        TYPES  : NSNotificationCenter
        DESCR  : "The notification center realm notifications will be sent to. E.g. [NSNotificationCenter defaultCenter]"
      RETURN:
        TYPES  : RLMRealm
        DESCR  : >
                 A realm mapped to a file at the specified path, 
                 running on the specified run loop and 
                 using the specified notification center.
      EXAMPLES:
      - CODE   : ex_objc_realm_intro
        DESCR  :

- Tables:
  METHODS:
  - g_group_is_empty:
      NAME     : isEmpty
      SUMMARY  : Checks if the realm has any tables
      DESCR    : Checks if the realm has any tables. Returns <code>YES/NO</code>
      SIGNATURE: "- (BOOL)isEmpty"
      RETURN:
        TYPES  : BOOL
        DESCR  : <code>YES</code> if there are no tables in the realm, otherwise <code>NO</code>.

  - g_group_has_table:
      NAME     : "hasTableWithName:"
      SUMMARY  : Checks if the realm has a table with the specified name
      DESCR    : Checks if the realm has a table with the specified name. Returns <code>YES/NO</code>
      SIGNATURE: "- (BOOL)hasTableWithName:(NSString *)name"
      PARAMS:
      - NAME   : name
        TYPES  : NSString *
        DESCR  : *g_group_has_table_parm1_descr
      - NAME   : obj
        TYPES  : Class
        DESCR  : Class type for compatibility test.
      RETURN:
        TYPES  : BOOL
        DESCR  : <code>YES</code> if the table exits, otherwise <code>NO</code>.
      EXAMPLES :
      - DESCR  :
        CODE   : ex_objc_group_optional_table

  - g_group_get_table:
      IGNORE   : ""

  - g_group_get_table_if_exists:
      NAMES    : "tableWithName:"
      SUMMARY  : *g_group_get_table_summary
      DESCR    : *g_group_get_table_descr
      SIGNATURE: |
                 "- (RLMTable *)tableWithName:(NSString *)name"
                 "- (id)tableWithName:(NSString *)name asTableClass:(Class)obj"
                 "- (RLMTable *)tableWithName:(NSString *)name objectClass:(Class)objClass"
      PARAMS:
      - NAME   : name
        TYPES  : NSString
        DESCR  : *g_group_get_table_parm1_descr
      - NAME   : obj
        TYPES  : Class
        DESCR  : *g_group_get_table_parm2_descr
      RETURN:
        TYPES  : RLMTable *
        DESCR  : *g_group_get_table_return1_descr
      EXAMPLES:
      -  DESCR :
         CODE  : ex_objc_group_traverse
      -  DESCR :
         CODE  : ex_objc_group_optional_table
      SEE      : "{@link g_group_has_table}"

  - g_group_create_table:
      NAMES    : "createTableWithName:"
      SUMMARY  : Create table in realm.
      DESCR    : Create table with the specified name in realm.
                 If a table already exists, an exception is thrown.
                 Optionally specify object class to be used when accessing table rows.
      SIGNATURE: |
                 "- (RLMTable *)createTableWithName:(NSString *)name"
                 "- (id)createTableWithName:(NSString *)name asTableClass:(Class)obj"
                 "- (RLMTable *)createTableWithName:(NSString *)name objectClass:(Class)objClass"
      PARAMS:
      - NAME   : name
        TYPES  : NSString
        DESCR  : *g_group_get_table_parm1_descr
      - NAME   : obj
        TYPES  : Class
        DESCR  : *g_group_get_table_parm2_descr
      RETURN:
        TYPES  : RLMTable *
        DESCR  : *g_group_get_table_return1_descr
      EXAMPLES:
      -  DESCR :
         CODE  : ex_objc_group_traverse
      -  DESCR :
         CODE  : ex_objc_group_optional_table
      SEE      : "{@link g_group_has_table}"
