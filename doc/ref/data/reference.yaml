#
# Reference documentation data for Objective-C language binding
#
ID        : objc
TITLE     : 'Objective-C'
STATUS:
  CODE    : Experimental
  DESCR   : >
            The Objective-C interface provides most of the functionality found in the
            core (C++) library. But the interface has not been tested as thoroughly
            as the core library, and it should be used with caution.

            Currently, the Objective-C interface is heavily extended and modfied.
            This implies that the API will likely change in the next release.
DESCR     : >
            The goal of TightDB is to provide a high performance
            data storage for your applications.

            TightDB integrates seamless in Objective-C, making it
            fast to learn and easy to use.  You can replace your traditional data
            structures with TightDB. Whether it is a simple array of integers or a
            complex data structure, you interface to TightDB as easily as using a
            standard array like container. But in addition you can
            handle much more data in much less memory, you get powerful query
            possibilities in an intuitive language and the ability to share your data
            across all supported languages and platforms.

            The core of the framework is the class {@link class_dyn_table}. The
            class is a representation of the
            fundamental concept <strong>TDBTable</strong>. You can use
            {@link class_typed_table} in the situations where you know the table structure
            a priori or when the data structure changes dynamically through the run time
            of the application.

            Tables organize data in columns and rows and data is compacted for
            low memory usage. The interface to the data resembles the native
            data structures. Moreover, tables can have nested tables
            as data (often referred to as subtables).

            A table can work standalone but it is common to create
            tables within a <i>context</i> (represented by
            {@link class_context}). A context can be read and
            written to disk while a table cannot. Moreover, the
            context adds transactions - through {@link
            class_transaction} - to TightDB.

            The table supports the most common types including numbers, timestamps and strings.
            It is possible to use a TightDB table class as column type. This means that you can
            have tables of tables structure.

            Moreover, TightDB introduces a column type called <b>Mixed</b>. A value of the
            Mixed type can be any supported value of TightDB. This implies - as the name
            indicates - that you can mix the type of values in the the column. In one row the
            value could be an integer, in another row the value could be a string or even a table.
            The Objective-C binding to TightDB utilizes Cocoa objects (<code>NSNumber</code>,
            <code>NSString</code>, <code>NSDate</code>, etc.) to support the <b>Mixed</b> typed
            columns.

            Using subtables and mixed types you can build arbitrarily complex data structures.

            The table below shows how the TightDB data types are mapped to Cocoa classes.

            <table>
              <thead>
                <tr><th>TightDB data type</th>         <th>Cocoa class</th>            <th>Description</th></tr>
              </thead>
              <tbody>
                <tr><td><code>TDBTypeBool</code></td>  <td><code>NSNumber</code></td>  <td>boolean values</td></tr>
                <tr><td><code>TDBTypeInt</code></td>   <td><code>NSNumber</code></td>  <td>integers</td></tr>
                <tr><td><code>TDBTypeFloat</code></td> <td><code>NSNumber</code></td>  <td>single-precision floating-point numbers</td></tr>
                <tr><td><code>TDBTypeDouble</code></td><td><code>NSNumber</code></td>  <td>double-precision floating-point numbers</td></tr>
                <tr><td><code>TDBTypeString</code></td><td><code>NSString</code></td>  <td>strings</td></tr>
                <tr><td><code>TDBTypeBinary</code></td><td><code>NSData</code></td>    <td>binary blobs</td></tr>
                <tr><td><code>TDBTypeDate</code></td>  <td><code>NSDate</code></td>    <td>time stamps</td></tr>
                <tr><td><code>TDBTable</code></td>     <td><code>TDBTable</code></td>  <td>TightDB tables</td></tr>
              </tbody>
            </table>

            It is possible to query data using the {@link class_dyn_query}
            class. Queries can be complex - involving
            any number of columns and values. You can either apply aggregate functions to you
            resulting data set or use the data set in your application as a
            {@link class_dyn_tableview} object.

IMPORT    : [reference, typed_table_ref, dyn_table_ref, dyn_query_ref, group_ref, typed_view_ref, dyn_view_ref, shared_group_ref, typed_query_ref, mixed_ref]
IMPORTPATH: ../../tightdb/doc/ref_cpp/data


CATEGORIES:                       # list global class-id in order of appearence
- Persistence:
  - context
  - transaction
- Typed Table:                    # Category header name
  - typed_table                   # Global Class name. File 'typed_table_ref.yaml'
  - typed_view
  - typed_query
- Dynamic Table:
  - dyn_table
  - dyn_view
  - dyn_query
#- Helpers:
#  - row
#  - version

EXAMPLES  :
- DESCR   :
  CODE    : ex_objc_intro           # id to example code
