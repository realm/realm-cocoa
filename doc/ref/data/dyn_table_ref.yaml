#
# Obj-C reference documentation for Table class
#

# INCONSISTENCY index* (row_ndx)
# INCONSISTENCY getTable & insertSubtable
# NAMING deleteRow -> remove,  get -> getInt, set -> setInt (and ndx->row_ndx)
# MISSING lookup
# MISSING where (only possible in typed tables)

ID         : class_dyn_table
TITLE      : Table (dynamic)
SUMMARY    : *g_dyn_table_intro_summary
DESCR      : *g_dyn_table_intro_descr
SEE        :
EXAMPLES   :
- DESCR:
  CODE     : ex_obcj_dyn_table_intro
IGNORE     : []                   # List of method-ids to ignore
CATEGORIES :
- State:
  METHODS:
  - g_dyn_table_size:
      NAMES    : count
      SUMMARY  : *g_dyn_table_size_summary
      DESCR    : *g_dyn_table_size_descr
      SIGNATURE: (size_t)count
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_size
        DESCR  :
  - g_dyn_table_is_empty:
      NAMES    : isEmpty
      SUMMARY  : *g_dyn_table_is_empty_summary
      DESCR    : *g_dyn_table_is_empty_descr
      SIGNATURE: (BOOL)isEmpty
      CONST    : True
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if empty, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_is_empty
        DESCR  :
  - g_dyn_table_is_valid:
      NAMES    : isValid (not yet implemented)
      SUMMARY  : *g_dyn_table_is_valid_summary
      DESCR    : *g_dyn_table_is_valid_descr
      CONST    : true
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if table is valid, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_is_valid
        DESCR  :
- Table:
  METHODS:
  - g_dyn_table_clear:
      NAMES    : clear
      SUMMARY  : *g_dyn_table_clear_summary
      DESCR    : *g_dyn_table_clear_descr
      SIGNATURE: (void)clear
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_clear
        DESCR  :
  - g_dyn_table_optimize:
      NAMES    : optimize
      SUMMARY  : *g_dyn_table_optimize_summary
      DESCR    : *g_dyn_table_optimize_descr
      SIGNATURE: (void)optimize
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_optimize
        DESCR  :
  - g_dyn_table_opertator==:
      NAMES    : isEqual
      SUMMARY  : *g_dyn_table_operator_eq_summary
      DESCR    : *g_dyn_table_operator_eq_descr
      SIGNATURE: (BOOL)isEqual:(TightdbTable *)other
      CONST    : True
      PARAMS:
      - NAME   : other
        TYPES  : const Table&
        DESCR  : The other table.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if the two tables are equal, <code>false</code> otherwise,
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_operator==
        DESCR  :
- Columns:
  METHODS:
  - g_dyn_table_get_column_count:
      NAMES    : getColumnCount
      SUMMARY  : *g_dyn_table_get_column_count_summary
      DESCR    : *g_dyn_table_get_column_count_descr
      SIGNATURE: (size_t)getColumnCount
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : The number of columns.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_count
        DESCR  :
  - g_dyn_table_get_column_name:
      NAMES    : getColumnName
      SUMMARY  : *g_dyn_table_get_column_name_summary
      DESCR    : *g_dyn_table_get_column_name_descr
      SIGNATURE: (NSString *)getColumnName:(size_t)ndx
      CONST    : True
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : The column index.
      RETURN:
        TYPES  : const char*
        DESCR  : The column name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_name
        DESCR  :
  - g_dyn_table_get_column_index:
      NAMES    : getColumnIndex
      SUMMARY  : *g_dyn_table_get_column_index_summary
      DESCR    : *g_dyn_table_get_column_index_descr
      SIGNATURE: (size_t)getColumnIndex:(NSString *)name
      CONST    : True
      PARAMS:
      - NAME   : name
        TYPES  : const char*
        DESCR  : The column name.
      RETURN:
        TYPES  : size_t
        DESCR  : The column index or <code>std::size_t(-1)</code> if there is no column with the specified name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_index
        DESCR  :
  - g_dyn_table_get_column_type:
      NAMES    : getColumnType
      SUMMARY  : *g_dyn_table_get_column_type_summary
      DESCR    : >
                 This method gets the type of a column using the column index. Currently,
                 the following types are supported:
                 <ul>
                   <li><code>tightdb_Bool</code></li>
                   <li><code>tightdb_Int</code></li>
                   <li><code>tightdb_Float</code></li>
                   <li><code>tightdb_Double</code></li>
                   <li><code>tightdb_String</code></li>
                   <li><code>tightdb_Binary</code></li>
                   <li><code>tightdb_Table</code></li>
                   <li><code>tightdb_Date</code></li>
                   <li><code>tightdb_Mixed</code></li>
                 </ul>
      SIGNATURE: (TightdbType)getColumnType:(size_t)ndx
      CONST    : True
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : The column index.
      RETURN:
        TYPES  : DataType
        DESCR  : The column type.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_type
        DESCR  :
- Rows:
  METHODS:
  - g_dyn_table_add_empty_row:
      NAMES    : addRow
      SUMMARY  : *g_dyn_table_add_empty_row_summary
      DESCR    : *g_dyn_table_add_empty_row_descr
      SIGNATURE: (size_t)addRow
      PARAMS:
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : "Number of rows to add (default: 1)."
  - g_dyn_table_insert_empty_row:
      NAMES    : insertRow (not yet implemented)
      SUMMARY  : *g_dyn_table_insert_empty_row_summary
      DESCR    : *g_dyn_table_insert_empty_row_descr
      SIGNATURE: |
                 void insert_empty_row(size_t row_ndx, size_t num_rows = 1)
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : Position to insert at.
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : "Number of rows to insert (default: 1)."
  - g_dyn_table_insert_bool:
  - g_dyn_table_insert_int:
  - g_dyn_table_insert_enum:
  - g_dyn_table_insert_date:
  - g_dyn_table_insert_string:
  - g_dyn_table_insert_binary:
  - g_dyn_table_insert_mixed:
  - g_dyn_table_insert_done:
      NAMES    : insert*
      SUMMARY  : *g_dyn_table_insert_xxx_summary
      DESCR    : *g_dyn_table_insert_xxx_descr
      SIGNATURE: |
                 (void)insertBool:(size_t)col_ndx ndx:(size_t)ndx value:(BOOL)value
                 (void)insertInt:(size_t)col_ndx ndx:(size_t)ndx value:(int64_t)value
                 (void)insertFloat:(size_t)col_ndx ndx:(size_t)ndx value:(float)value
                 (void)insertDouble:(size_t)col_ndx ndx:(size_t)ndx value:(double)value
                 (void)insertDate:(size_t)col_ndx ndx:(size_t)ndx value:(time_t)value
                 (void)insertString:(size_t)col_ndx ndx:(size_t)ndx value:(NSString *)value
                 (void)insertBinary:(size_t)col_ndx ndx:(size_t)ndx value:(TightdbBinary *)value
                 (void)insertBinary:(size_t)col_ndx ndx:(size_t)ndx data:(const char *)data size:(size_t)size
                 (void)insertMixed:(size_t)col_ndx ndx:(size_t)row_ndx value:(TightdbMixed *)value
                 (void)insertSubtable:(size_t)col_ndx ndx:(size_t)row_ndx
                 (void)insertDone
      PARAMS:
      - NAME   : ndx, row_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : The row index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*, Mixed]
        DESCR  : The value to insert.
      - NAME   : size
        TYPES  : size_t
        DESCR  : Size in bytes of binary value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_insert_xxx
        DESCR  :
      SEE      : "For a safe way to insert rows, use {@link g_dyn_table_insert_empty_row}, and then set individual values in the columns."

  - g_dyn_table_remove_row:
      NAMES    : remove
      SUMMARY  : *g_dyn_table_remove_row_summary
      DESCR    : *g_dyn_table_remove_row_descr
      SIGNATURE: (void)remove:(size_t)ndx
      PARAMS:
      - NAME   : ndx
        TYPES  : size_t
        DESCR  : Position of the row to delete.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove
        DESCR  :
  - g_dyn_table_remove_last:
      NAMES    : removeLast
      SUMMARY  : *g_dyn_table_remove_last_row_summary
      DESCR    : *g_dyn_table_remove_last_row_descr
      SIGNATURE: (void)removeLast
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove_last_row
        DESCR  :
- Values:
  METHODS:
  - g_dyn_table_get_bool:
  - g_dyn_table_get_int:
  - g_dyn_table_get_date:
  - g_dyn_table_get_string:
  - g_dyn_table_get_binary:
  - g_dyn_table_get_mixed:
  - g_dyn_table_get_mixed_type:
  - g_dyn_table_get_subtable:
  - g_dyn_table_get_subtable_const:
      NAMES    : get*
      SUMMARY  : *g_dyn_table_get_xxx_summary
      DESCR    : *g_dyn_table_get_xxx_descr
      SIGNATURE: |
                 (BOOL)getBool:(size_t)col_ndx ndx:(size_t)ndx
                 (int64_t)get:(size_t)col_ndx ndx:(size_t)ndx
                 (time_t)getDate:(size_t)col_ndx ndx:(size_t)ndx
                 (float)getFloat:(size_t)col_ndx ndx:(size_t)ndx
                 (double)getDouble:(size_t)col_ndx ndx:(size_t)ndx
                 (NSString *)getString:(size_t)col_ndx ndx:(size_t)ndx
                 (TightdbBinary *)getBinary:(size_t)col_ndx ndx:(size_t)ndx
                 (TightdbMixed *)getMixed:(size_t)col_ndx ndx:(size_t)row_ndx
                 (TightdbType)getMixedType:(size_t)col_ndx ndx:(size_t)row_ndx

                 (TightdbTable *)getSubtable:(size_t)col_ndx ndx:(size_t)ndx
                 (id)getSubtable:(size_t)col_ndx ndx:(size_t)ndx withClass:(__unsafe_unretained Class)classObj
      CONST    : True
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      RETURN:
        TYPES  : [bool, int64_t, float, double, time_t, NSString, TightdbBinary, TightdbMixed, TightdbType, TightdbTable]
        DESCR  : The value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_xxx
        DESCR  :
  - g_dyn_table_set_bool:
  - g_dyn_table_set_int:
  - g_dyn_table_set_enum:
  - g_dyn_table_set_date:
  - g_dyn_table_set_string:
  - g_dyn_table_set_binary:
  - g_dyn_table_set_mixed:
      NAMES    : set*
      SUMMARY  : *g_dyn_table_set_xxx_summary
      DESCR    : *g_dyn_table_set_xxx_descr
      SIGNATURE: |
                 (void)setBool:(size_t)col_ndx ndx:(size_t)ndx value:(BOOL)value
                 (void)set:(size_t)col_ndx ndx:(size_t)ndx value:(int64_t)value
                 (void)setFloat:(size_t)col_ndx ndx:(size_t)ndx value:(float)value
                 (void)setDouble:(size_t)col_ndx ndx:(size_t)ndx value:(double)value
                 (void)setDate:(size_t)col_ndx ndx:(size_t)ndx value:(time_t)value
                 (void)setString:(size_t)col_ndx ndx:(size_t)ndx value:(NSString *)value
                 (void)setBinary:(size_t)col_ndx ndx:(size_t)ndx value:(TightdbBinary *)value
                 (void)setBinary:(size_t)col_ndx ndx:(size_t)ndx data:(const char *)data size:(size_t)size
                 (void)setMixed:(size_t)col_ndx ndx:(size_t)row_ndx value:(TightdbMixed *)value

      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*, Mixed]
        DESCR  : The value.
      - NAME   : size
        TYPES  : size_t
        DESCR  : Size in bytes of binary value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_set_xxx
        DESCR  :
- Sub-tables:
  METHODS:
  - g_dyn_table_get_subtable_size:
      NAMES    : getTableSize
      SUMMARY  : *g_dyn_table_get_subtable_size_summary
      DESCR    : *g_dyn_table_get_subtable_size_descr
      SIGNATURE: (size_t)getTableSize:(size_t)col_ndx ndx:(size_t)row_ndx
      CONST    : true
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      RETURN:
        TYPES  : size_t
        DESCR  : Number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_subtable
        DESCR  :
  - g_dyn_table_clear_subtable:
      NAMES    : clearSubtable
      SUMMARY  : *g_dyn_table_clear_subtable_summary
      DESCR    : *g_dyn_table_clear_subtable_descr
      SIGNATURE: (void)clearSubtable:(size_t)col_ndx ndx:(size_t)row_ndx
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_clear_subtable
        DESCR  :
- Indexes:
  METHODS:
  - g_dyn_table_set_index:
      NAMES    : setIndex
      SUMMARY  : *g_dyn_table_set_index_summary
      DESCR    : *g_dyn_table_set_index_descr
      SIGNATURE: (void)setIndex:(size_t)col_ndx
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_set_index
        DESCR  :
  - g_dyn_table_has_index:
      NAMES    : hasIndex
      SUMMARY  : *g_dyn_table_has_index_summary
      DESCR    : *g_dyn_table_has_index_descr
      SIGNATURE: (BOOL)hasIndex:(size_t)col_ndx
      CONST    : true
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if column is indexed, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_has_index
        DESCR  :
- Searching:
  METHODS:
  - g_dyn_table_lookup:
      NAMES    : lookup (not yet implemented)
      SUMMARY  : *g_dyn_table_lookup_summary
      DESCR    : *g_dyn_table_lookup_descr
      SIGNATURE:
      CONST    : True
      PARAMS:
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value to search for.
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_lookup
        DESCR  :
  - g_find_first_bool:
  - g_find_first_int:
  - g_find_first_date:
  - g_find_first_string:
      NAMES    : find*
      SUMMARY  : Find first matching row.
      DESCR    : The method finds the first occurence of a given value in a column.
      SIGNATURE: |
                 (size_t)findInt:(size_t)col_ndx value:(int64_t)value
                 (size_t)findBool:(size_t)col_ndx value:(BOOL)value
                 (size_t)findDate:(size_t)col_ndx value:(time_t)value
                 (size_t)findString:(size_t)col_ndx value:(NSString *)value
                 (size_t)findFloat:(size_t)col_ndx value:(float)value
                 (size_t)findDouble:(size_t)col_ndx value:(double)value
                 (size_t)findBinary:(size_t)col_ndx value:(TightdbBinary *)value

      CONST    : True
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*]
        DESCR  : The value.
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>std::size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_find_first_xxx
        DESCR  :
  - g_find_all_bool:
  - g_find_all_int:
  - g_find_all_date:
  - g_find_all_string:
  - g_find_all_float:
  - g_find_all_double:
  - g_find_all_bool_const:
  - g_find_all_int_const:
  - g_find_all_date_const:
  - g_find_all_string_const:
  - g_find_all_float_const:
  - g_find_all_double_const:
      NAMES    : findAll* (not implemented for all types yet)
      SUMMARY  : *g_dyn_table_find_all_xxx_summary
      DESCR    : >
                 The method finds all occurences of a given value in a specific column.
                 The rows are returned as a {@link class_dyn_tableview} object.
      SIGNATURE: |
                 (TightdbView *)findAll:(TightdbView *)view column:(size_t)col_ndx value:(int64_t)value

      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*]
        DESCR  : The value.
      RETURN:
        TYPES  : TableView
        DESCR  : The view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_find_all_xxx
        DESCR  :
  - g_dyn_table_get_sorted_view:
  - g_dyn_table_get_sorted_view_const:
      NAMES    : getSortedView (not yet implemented)
      SUMMARY  : *g_dyn_table_get_sorted_view_summary
      DESCR    : *g_dyn_table_get_sorted_view_desc
      SIGNATURE: |
                 TableView      get_sorted_view(size_t column_ndx, bool ascending=true);
                 ConstTableView get_sorted_view(size_t column_ndx, bool ascending=true) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : ascending
        TYPES  : bool
        DESCR  : *cpp_dyn_table_get_sorted_view_param
      RETURN:
        TYPES  : TableView
        DESCR  : A view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_sorted_view
        DESCR  :
  - g_dyn_table_distinct:
  - g_dyn_table_distinct_const:
      NAMES    : distinct (not yet implemented)
      SUMMARY  : *g_dyn_table_distinct_summary
      DESCR    : *g_dyn_table_distinct_desc
      SIGNATURE: |
                 TableView      distinct(size_t column_ndx);
                 ConstTableView distinct(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      RETURN:
        TYPES  : TableView
        DESCR  : A view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_distinct
        DESCR  :
  - g_dyn_table_where:
  - g_dyn_table_where_const:
      NAMES    : [where (not yet implemented), where]
      SIGNATURE: |
                 Query       where()
                 const Query where() const
      SUMMARY  : Query table.
      DESCR    : This method initiates a query. See {@link class_dyn_query}.
      RETURN:
        TYPES  : [Query, const Query]
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_table_where
- Aggregates:
  METHODS:
  - g_dyn_table_count_int:
  - g_dyn_table_count_string:
      NAMES    : count*
      SUMMARY  : *g_dyn_table_count_summary
      DESCR    : *g_dyn_table_count_descr
      SIGNATURE: |
                 (size_t)countInt:(size_t)col_ndx target:(int64_t)target
                 (size_t)countFloat:(size_t)col_ndx target:(float)target
                 (size_t)countDouble:(size_t)col_ndx target:(double)target
                 (size_t)countString:(size_t)col_ndx target:(NSString *)target
      CONST    : True
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : target
        TYPES  : int64_t
        DESCR  : The value.
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_count
        DESCR  :
  - g_dyn_table_sum:
  - g_dyn_table_sum_float:
  - g_dyn_table_sum_double:
      NAMES    : [sumInt, sumFloat, sumDouble]
      SUMMARY  : *g_dyn_table_sum_summary
      DESCR    : *g_dyn_table_sum_descr
      SIGNATURE: |
                 (int64_t)sumInt:(size_t)col_ndx
                 (double)sumFloat:(size_t)col_ndx
                 (double)sumDouble:(size_t)col_ndx
      CONST    : True
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : [int64_t, double]
        DESCR  : The sum.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_sum
        DESCR  :
  - g_dyn_table_maximum:
  - g_dyn_table_maximum_float:
  - g_dyn_table_maximum_double:
      NAMES    : [max*, maxFloat, maximum_double]
      SUMMARY  : *g_dyn_table_maximum_summary
      DESCR    : *g_dyn_table_maximum_descr
      SIGNATURE: |
                 (int64_t)maxInt:(size_t)col_ndx
                 (float)maxFloat:(size_t)col_ndx
                 (double)maxDouble:(size_t)col_ndx
      CONST    : True
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The maximum value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_maximum
        DESCR  :
  - g_dyn_table_minimum:
  - g_dyn_table_minimum_float:
  - g_dyn_table_minimum_double:
      NAMES    : [min*, minimum_float, minimum_double]
      SUMMARY  : *g_dyn_table_minimum_summary
      DESCR    : *g_dyn_table_minimum_descr
      CONST    : True
      SIGNATURE: |
                 (int64_t)minInt:(size_t)col_ndx
                 (float)minFloat:(size_t)col_ndx
                 (double)minDouble:(size_t)col_ndx
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The minimum value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_minimum
        DESCR  :
  - g_dyn_table_average:
  - g_dyn_table_average_float:
  - g_dyn_table_average_double:
      NAMES    : [avg*, average_float, average_double]
      SUMMARY  : *g_dyn_table_average_summary
      DESCR    : *g_dyn_table_average_descr
      CONST    : True
      SIGNATURE: |
                 (double)avgInt:(size_t)col_ndx
                 (double)avgFloat:(size_t)col_ndx
                 (double)avgDouble:(size_t)col_ndx
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : double
        DESCR  : The average
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_average
        DESCR  :
- Dump:
  METHODS:
  - g_dyn_table_to_json:
      NAMES    : toJSON (not yet implemented)
      SUMMARY  : *g_dyn_table_to_json_summary
      DESCR    : *g_dyn_table_to_json_descr
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_json
        DESCR  :
  - g_dyn_table_to_string:
      NAMES    : toString (not yet implemented)
      SUMMARY  : *g_dyn_table_to_string_summary
      DESCR    : *g_dyn_table_to_string_descr
      CONST    : true
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "The number of rows to convert. Default: 500."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_string
        DESCR  :