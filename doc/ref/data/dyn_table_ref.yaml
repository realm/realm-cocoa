#
# Obj-C reference documentation for Table class
#

# INCONSISTENCY index* (row_ndx)
# INCONSISTENCY getTable & insertSubtable
# NAMING deleteRow -> remove,  get -> getInt, set -> setInt (and ndx->row_ndx)
# MISSING lookup
# MISSING where (only possible in typed tables)

ID         : class_dyn_table
TITLE      : TDBTable (dynamic)
SUMMARY    : *g_dyn_table_intro_summary
DESCR      :
- TEXT     : *g_dyn_table_intro_descr_core
- TEXT     : *g_dyn_table_intro_descr_dynamic
- TEXT     : *g_dyn_table_intro_descr_types
- TEXT     : *g_dyn_table_intro_descr_notice
SEE        :
EXAMPLES   :
- DESCR:
  CODE     : ex_objc_table_dynamic_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES :

- State:
  METHODS:
  - g_dyn_table_size:
      NAME     : "rowCount"
      SUMMARY  : *g_dyn_table_size_summary
      DESCR    : *g_dyn_table_size_descr
      SIGNATURE: "@property (nonatomic, readonly) NSUInteger rowCount"
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_size_summary
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_size
        DESCR  :

  - g_dyn_table_get_column_count:
      NAME     : columnCount
      SUMMARY  : *g_dyn_table_get_column_count_summary
      DESCR    : *g_dyn_table_get_column_count_descr
      SIGNATURE: "@property (nonatomic, readonly) NSUInteger columnCount"
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_get_column_count_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_get_column_count
        DESCR  :

  - g_dyn_table_is_valid:
      TODO     : soon
      NAME     : isValid
      SUMMARY  : *g_dyn_table_is_attached_summary
      DESCR    : *g_dyn_table_is_attached_descr
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_dyn_table_is_attached_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_is_attached
        DESCR  :


- Table:
  METHODS:
  - g_dyn_table_clear:
      NAME     : "removeAllRows"
      SUMMARY  : *g_dyn_table_clear_summary
      DESCR    : *g_dyn_table_clear_descr
      SIGNATURE: (void)removeAllRows
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_clear
        DESCR  :

  - g_dyn_table_optimize:
      NAME     : "optimize"
      SUMMARY  : *g_table_optimize_summary
      DESCR    : *g_table_optimize_descr
      SIGNATURE: (BOOL)optimize
      RETURN:
        TYPES  : BOOL
        DESCR  : &objc_no_if_error
                 "<code>NO</code> if an error occured, otherwise <code>YES</code>"
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_optimize
        DESCR  :

  - g_dyn_table_opertator==:
      NAME     : "isEqual"
      SUMMARY  : *g_dyn_table_operator_eq_summary
      DESCR    : *g_dyn_table_operator_eq_descr
      SIGNATURE: (BOOL)isEqual:(TDBTable *)other
      PARAMS:
      - NAME   : other
        TYPES  : TDBTable *
        DESCR  : *g_dyn_table_operator_eq_table_descr
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_dyn_table_operator_eq_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_operator==
        DESCR  :

  - g_dyn_table_opertator!=:
      TODO     : soon
      NAME     : is???Equal
      SUMMARY  : *g_dyn_table_operator_neq_summary
      DESCR    : *g_dyn_table_operator_neq_descr
      SIGNATURE: (BOOL)isEqual:(TightdbTable *)other
      PARAMS:
      - NAME   : other
        TYPES  : TightdbTable *
        DESCR  : *g_dyn_table_operator_eq_table_descr
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_dyn_table_operator_eq_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_operator==
        DESCR  :


- Columns:
  METHODS:
  - g_dyn_table_rename_column:
      TODO     : later

  - g_dyn_table_add_column:
      NAME     : "addColumnWithName:type:"
      SUMMARY  : *g_dyn_table_add_column_summary
      DESCR    :
      - TEXT   : *g_dyn_table_add_column_descr
      - TEXT   : &objc_column_types
                >
                Currently, the following types are supported (declared in <code>type.h</code>):
                 <ul>
                   <li><code>TDBBoolType</code></li>
                   <li><code>TDBIntType</code></li>
                   <li><code>TDBFloatType</code></li>
                   <li><code>TDBDoubleType</code></li>
                   <li><code>TDBStringType</code></li>
                   <li><code>TDBBinaryType</code></li>
                   <li><code>TDBTableType</code></li>
                   <li><code>TDBDateType</code></li>
                   <li><code>TDBMixedType</code></li>
                 </ul>
      SIGNATURE: (NSUInteger)addColumnWithName:(NSString *)name type:(TDBType)type
      PARAMS:
      - NAME   : name
        TYPES  : NSString *
        DESCR  : ""
      - NAME   : type
        TYPES  : TDBType
        DESCR  : ""
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_add_column_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_add_column
        DESCR  :
  - g_dyn_table_remove_column:
      NAME     : "renameColumnWithIndex:to:"
      SUMMARY  : *g_dyn_table_rename_column_summary
      DESCR    : *g_dyn_table_rename_column_descr
      SIGNATURE: (NSString *)renameColumnWithIndex:(NSUInteger)colIndex to:(NSString *)newName
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_rename_column_param1_descr
      - NAME   : newName
        TYPES  : NSString *
        DESCR  : *g_dyn_table_rename_column_param1_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_rename_column
        DESCR  :


  - g_dyn_table_get_column_name:
      NAME     : "nameOfColumnWithIndex:"
      SUMMARY  : *g_dyn_table_get_column_name_summary
      DESCR    : *g_dyn_table_get_column_name_descr
      SIGNATURE: (NSString *)nameOfColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_get_column_name_param1_descr
      RETURN:
        TYPES  : NSString *
        DESCR  : *g_dyn_table_get_column_name_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_get_column_name
        DESCR  :

  - g_dyn_table_get_column_index:
      NAME     : "indexOfColumnWithName:"
      SUMMARY  : *g_dyn_table_get_column_index_summary
      DESCR    : *g_dyn_table_get_column_index_descr
      SIGNATURE: (NSUInteger)indexOfColumnWithName:(NSString *)name
      PARAMS:
      - NAME   : name
        TYPES  : NSString *
        DESCR  : *g_dyn_table_name_of_column_descr
      RETURN:
        TYPES  : NSUInteger
        DESCR  : The column index or <code>NSNotFound</code> if there is no column with the specified name.
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_get_column_index
        DESCR  : ""

  - g_dyn_table_get_column_type:
      NAME     : "columnTypeOfColumnWithIndex:"
      SUMMARY  : *g_dyn_table_get_column_type_summary
      DESCR    :
      - TEXT   : *g_dyn_table_get_column_type_descr1
      - TEXT   : *objc_column_types
      SIGNATURE: (TDBType)columnTypeOfColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : g_dyn_table_get_column_type_parm1_descr
      RETURN:
        TYPES  : TDBType
        DESCR  : *g_dyn_table_get_column_type_return1_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_get_column_type
        DESCR  :

  - g_dyn_table_add_int:
      TODO     : later


- Rows:
  METHODS:
  - g_dyn_table_cursor_at_index:
      NAME     : "rowAtIndex:"
      SUMMARY  : Returns a cursor at a specified row number.
      DESCR    : *g_typed_table_cursor_at_index_descr
      SIGNATURE: "(TDBRow *)rowAtIndex:(NSUInteger)rowIndex"
      PARAMS:
      - NAME   : rowIndex
        TYPES  : NSUInteger
        DESCR  : The row number.
      RETURN:
        TYPES  : TDBRow *
        DESCR  : The row.

  - g_dyn_table_cursor_at_last_index:
      NAME     : lastRow
      SUMMARY  : Returns a typed curser at highest row number.
      DESCR    : *g_typed_table_cursor_at_index_descr
      SIGNATURE: "(TDBRow *)lastRow"
      RETURN:
        TYPES  : TDBRow *
        DESCR  : The row.

  - g_dyn_table_insert_empty_row:
      TODO     : later
      NAME     : "insertEmptyRowAtIndex:"
      SUMMARY  : *g_dyn_table_insert_empty_row_summary
      DESCR    : *g_dyn_table_insert_empty_row_descr
      SIGNATURE: (TDBRow *)insertEmptyRowAtIndex:(NSUInteger)rowIndex
      PARAMS:
      - NAME   : rowIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_insert_empty_row_parm1_descr
      RETURN:
        TYPES  : TDBRow *
        DESCR  : Returns the inserted row.

  - objc_dyn_table_insert_object:
      NAME     : "insertRow:atRowIndex:"
      SUMMARY  : Insert a row.
      DESCR    : >
                 This method will insert a row in the table at a particular
                 place. The row is optionally represented as Cocoa (NS) objects,
                 otherwise an empty row is inserted. If data is nil, an empty row
                 with default values is inserted. Properties in generic objects
                 (derived from <code>NSObject</code>) which match columns names
                 will be used. Non-matching properties are ignored.
      SIGNATURE: (void)insertRow:(id)anObject atRowIndex:(NSUInteger)rowIndex
      PARAMS:
      - NAME    : anObject
        TYPES   : id
        DESCR   : The row either as an <code>NSArray</code>, <code>NSDictionary</code> or a generic <code>NSObject</code>.
      - NAME    : rowIndex
        TYPES   : NSUInteger
        DESCR   : *g_dyn_table_insert_empty_row_parm1_descr

  - objc_dyn_table_append_row:
      NAME     : "addRow:"
      SUMMARY  : Append a row using object literals.
      DESCR    : >
                 This method will append (insert at the end) a row to a table.
                 The row is represented as Cocoa (NS) objects as elements in
                 array. The elements' types are validated before creating the
                 new row. If data is nil, an empty row
                 with default values is appended. Properties in generic objects
                 (derived from <code>NSObject</code>) which match columsn names
                 will be used.
      SIGNATURE: (void)addRow:(NSObject *)data
      PARAMS:
      - NAME   : data
        TYPES  : NSObject *
        DESCR  : The row either as an <code>NSArray</code>, <code>NSDictionary</code>, or a generic <code>NSObject</code>.


# TODO: Should this be supported at all?
#  - g_dyn_table_insert_bool:
#      NAME     : insertBool
#  - g_dyn_table_insert_int:
#      NAME     : insertInt
#  - g_dyn_table_insert_enum:
#      INGORED  : ""
#  - g_dyn_table_insert_date:
#      NAME     : insertDate
#  - g_dyn_table_insert_string:
#      NAME     : insertString
#  - g_dyn_table_insert_binary:
#      NAME     : insertBinary
#  - g_dyn_table_insert_mixed:
#      NAME     : insertMixed
#  - g_dyn_table_insert_subtable:
#      NAME     : insertSubtable
#  - g_dyn_table_insert_done:
#      NAME     : insertDone
#
#      TITLE    : insert*
#      SUMMARY  : *g_dyn_table_insert_xxx_summary
#      DESCR    : *g_dyn_table_insert_xxx_descr
#      SIGNATURE: |
#                 (void)insertBool:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(BOOL)value
#                 (void)insertInt:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(int64_t)value
#                 (void)insertFloat:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(float)value
#                 (void)insertDouble:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(double)value
#                 (void)insertDate:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(time_t)value
#                 (void)insertString:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(NSString *)value
#                 (void)insertBinary:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(TightdbBinary *)value
#                 (void)insertBinary:(NSUInteger)col_ndx ndx:(NSUInteger)ndx data:(const char *)data size:(NSUInteger)size
#                 (void)insertMixed:(NSUInteger)col_ndx ndx:(NSUInteger)row_ndx value:(TightdbMixed *)value
#                 (void)insertSubtable:(NSUInteger)col_ndx ndx:(NSUInteger)row_ndx
#                 (void)insertDone
#TODO: does insertBinary with direct char*/size exist?
#      PARAMS:
#      - NAME   : ndx, row_ndx
#        TYPES  : NSUInteger
#        DESCR  : *g_dyn_table_insert_parm1_descr
#      - NAME   : ndx
#        TYPES  : NSUInteger
#        DESCR  : *g_dyn_table_insert_parm2_descr
#      - NAME   : value
#        TYPES  : [BOOL, int64_t, float, double, time_t, NSString*, TightdbBinary*, const char*, TightdbMixed*]
#        DESCR  : *g_dyn_table_insert_parm3_descr
#      - NAME   : data
#        TYPES  : const char *
#        DESCR  : &g_dyn_table_insert_xxx_parm4_descr
#                 Pointer to start of binary data.
#      - NAME   : size
#        TYPES  : NSUInteger
#        DESCR  : &g_dyn_table_insert_xxx_parm5_descr
#                 Size in bytes of binary data.
#      EXAMPLES:
#      - CODE   : ex_objc_dyn_table_insert_xxx
#        DESCR  :
#      SEE      : "For a safe way to insert rows, use {@link g_dyn_table_insert_empty_row}, and then set individual values in the columns."

  - g_dyn_table_remove_row:
      NAME     : "removeRowAtIndex:"
      SUMMARY  : *g_dyn_table_remove_row_summary
      DESCR    : *g_dyn_table_remove_row_descr
      SIGNATURE: (void)removeRowAtIndex:(NSUInteger)rowIndex
      PARAMS:
      - NAME   : rowIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_remove_row_param1_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_remove
        DESCR  : *objc_no_if_error

  - g_dyn_table_remove_last_row:
      NAME     : removeLastRow
      SUMMARY  : *g_dyn_table_remove_last_row_summary
      DESCR    : *g_dyn_table_remove_last_row_descr
      SIGNATURE: (void)removeLastRow
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_remove_last_row
        DESCR  : *objc_no_if_error

#- Values:
#  METHODS:
 # - g_dyn_table_get_subtable_const:
 #     TODO     : ""
 # - g_dyn_table_get_bool:
 #     #NAME     : getBool
 #     TODO     :""
 # - g_dyn_table_get_int:
 #     #NAME     : get
 #     TODO     : ""
#TODO: rename to getInt
 # - g_dyn_table_get_float:
 #     #NAME     : getFloat
 #     TODO     :""
 # - g_dyn_table_get_double:
 #     #NAME     : getDouble
 #     TODO     :""
 # - g_dyn_table_get_date:
 #     #NAME     : getDate
 #     TODO     :""
 # - g_dyn_table_get_string:
 #     #NAME     : getString
 #     TODO     :""
 # - g_dyn_table_get_binary:
 #     #NAME     : getBinary
 #     TODO     :""
 # - g_dyn_table_get_mixed:
 #     #NAME     : getMixed
 #     TODO     :""
#- g_dyn_table_get_mixed_type:
      #NAME     : getMixedType
 #     TODO     :""
 # - g_dyn_table_get_subtable:
 #     #NAME     : getSubtable
 #     TODO     :""
      #TITLE    : get*
      #SUMMARY  : *g_dyn_table_get_xxx_summary
      #DESCR    : *g_dyn_table_get_xxx_descr
      #SIGNATURE: |
                 #(BOOL)getBool:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(int64_t)get:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(float)getFloat:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(double)getDouble:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(time_t)getDate:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(NSString *)getString:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(TightdbBinary *)getBinary:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(TightdbMixed *)getMixed:(NSUInteger)col_ndx ndx:(NSUInteger)row_ndx
                 #(TightdbType)getMixedType:(NSUInteger)col_ndx ndx:(NSUInteger)row_ndx

                 #(TightdbTable *)getSubtable:(NSUInteger)col_ndx ndx:(NSUInteger)ndx
                 #(id)getSubtable:(NSUInteger)col_ndx ndx:(NSUInteger)ndx withClass:(__unsafe_unretained Class)classObj
#TODO: What's the last method about?

      #PARAMS:
      #- NAME   : col_ndx
      #  TYPES  : NSUInteger
      #  DESCR  : *g_dyn_table_get_xxx_parm1_descr
      #- NAME   : row_ndx
      #  TYPES  : NSUInteger
      #  DESCR  : *g_dyn_table_get_xxx_parm2_descr
      #RETURN:
      #  TYPES  : [BOOL, int64_t, float, double, time_t, NSString*, TightdbBinary*,
      #            TightdbMixed*, TightdbType, TightdbTable*]
      #  DESCR  : *g_dyn_table_get_xxx_return_descr
      #EXAMPLES:
      #- CODE   : ex_objc_dyn_table_get_xxx
      #  DESCR  :

 # - g_dyn_table_set_bool:
 #     NAME     : setBool
 # - g_dyn_table_set_int:
 #     NAME     : set
#TODO: Rename to setInt
 # - g_dyn_table_set_float:
 #     NAME     : setFloat
 # - g_dyn_table_set_double:
 #     NAME     : setDouble
 # - g_dyn_table_set_enum:
 #     IGNORE   : ""
 # - g_dyn_table_set_date:
 #     NAME     : setDate
 # - g_dyn_table_set_string:
 #     NAME     : setString
 # - g_dyn_table_set_binary:
 #     NAME     : setBinary
 # - g_dyn_table_set_binary_2:
 #     NAME     : setBinary
 # - g_dyn_table_set_mixed:
 #     NAME     : setMixed
 #     IGNORE   :
 #     TITLE    : set*
 #     SUMMARY  : *g_dyn_table_set_xxx_summary
 #     DESCR    : *g_dyn_table_set_xxx_descr
 #     SIGNATURE: |
 #                (void)setBool:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(BOOL)value
 #                (void)set:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(int64_t)value
 #                (void)setFloat:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(float)value
 #                (void)setDouble:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(double)value
 #                (void)setDate:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(time_t)value
 #                (void)setString:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(NSString *)value
 #                (void)setBinary:(NSUInteger)col_ndx ndx:(NSUInteger)ndx value:(TightdbBinary *)value
 #               (void)setBinary:(NSUInteger)col_ndx ndx:(NSUInteger)ndx data:(const char *)data size:(NSUInteger)size
 #                (void)setMixed:(NSUInteger)col_ndx ndx:(NSUInteger)row_ndx value:(TightdbMixed *)value
 #     PARAMS:
 #     - NAME   : col_ndx
 #       TYPES  : NSUInteger
 #       DESCR  : *g_dyn_table_get_xxx_parm1_descr
 #     - NAME   : row_ndx
 #       TYPES  : NSUInteger
 #       DESCR  : *g_dyn_table_get_xxx_parm2_descr
 #     - NAME   : value
 #       TYPES  : [BOOL, int64_t, float, double, time_t, NSString*, TightdbBinary*,
 #                 const char*, NSUInteger, TightdbMixed*]
 #       DESCR  : *g_dyn_table_set_xxx_parm3_descr
 #     - NAME   : data
 #       TYPES  : const char *
 #       DESCR  : *g_dyn_table_insert_xxx_parm4_descr
 #     - NAME   : size
 #       TYPES  : NSUInteger
 #       DESCR  : *g_dyn_table_insert_xxx_parm5_descr
 #     EXAMPLES:
 #     - CODE   : ex_objc_dyn_table_set_xxx
 #       DESCR  :


- Indexes:
  METHODS:
  - g_dyn_table_set_index:
      NAME     : "createIndexInColumnWithIndex:"
      SUMMARY  : *g_dyn_table_set_index_summary
      DESCR    : *g_dyn_table_set_index_descr
      SIGNATURE: (void)createIndexInColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_set_index
        DESCR  :

  - g_dyn_table_has_index:
      NAME     : "isIndexCreatedInColumnWithIndex:"
      SUMMARY  : *g_dyn_table_has_index_summary
      DESCR    : *g_dyn_table_has_index_descr
      SIGNATURE: (BOOL)isIndexCreatedInColumnWithIndex:(NSUInteger)colIndex;
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      RETURN:
        TYPES  : BOOL
        DESCR  : *g_dyn_table_has_index_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_has_index
        DESCR  :


- Searching:
  METHODS:
  - g_dyn_table_lookup:
      TODO     : soon

      NAME     : lookup
      SUMMARY  : *g_dyn_table_lookup_summary
      DESCR    : *g_dyn_table_lookup_descr
      SIGNATURE:
      PARAMS:
      - NAME   : value
        TYPES  : NSString *
        DESCR  : *g_dyn_table_lookup_parm1_descr
      RETURN:
        TYPES  : NSUInteger
        DESCR  : "The row index or <code>NSNotFound</code> if there is no match."
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_lookup
        DESCR  :

  - g_dyn_table_find_first_bool:
      NAME     : findBool
  - g_dyn_table_find_first_int:
      NAME     : findInt
  - g_dyn_table_find_first_float:
      NAME     : findFloat
  - g_dyn_table_find_first_double:
      NAME     : findDouble
  - g_dyn_table_find_first_date:
      NAME     : findDate
  - g_dyn_table_find_first_string:
      NAME     : findString
  - g_dyn_table_find_first_binary:
      NAME     : findBinary

# TODO: change name to findFirst* ?

# jjepsen: might be redundant (use a query?)
#      TITLE    : find*
#      SUMMARY  : Find first matching row.
#      DESCR    : The method finds the first occurence of a given value in a column.
#      SIGNATURE: |
#                 (NSUInteger)findBool:(NSUInteger)col_ndx value:(BOOL)value
#                 (NSUInteger)findInt:(NSUInteger)col_ndx value:(int64_t)value
#                 (NSUInteger)findFloat:(NSUInteger)col_ndx value:(float)value
#                 (NSUInteger)findDouble:(NSUInteger)col_ndx value:(double)value
#                 (NSUInteger)findDate:(NSUInteger)col_ndx value:(time_t)value
#                 (NSUInteger)findString:(NSUInteger)col_ndx value:(NSString *)value
#                 (NSUInteger)findBinary:(NSUInteger)col_ndx value:(TightdbBinary *)value
#      PARAMS:
#      - NAME   : col_ndx
#        TYPES  : NSUInteger
#        DESCR  : *g_dyn_table_find_first_xxx_parm1_descr
#      - NAME   : value
#        TYPES  : [BOOL, int64_t, float, double, time_t, NSString, const char*]
#        DESCR  : *g_dyn_table_find_first_xxx_parm2_descr
#      RETURN:
#        TYPES  : NSUInteger
#TODO: is that the same in objc?
#        DESCR  : "The row index or <code>NSNotFound</code> if there is no match."
#      EXAMPLES:
#      - CODE   : ex_objc_dyn_table_find_first_xxx
#       DESCR  :

#  - g_dyn_table_find_all_bool_const:
#      IGNORE   : ""
#  - g_dyn_table_find_all_int_const:
#      IGNORE   : ""
#  - g_dyn_table_find_all_date_const:
#      IGNORE   : ""
#  - g_dyn_table_find_all_string_const:
#      IGNORE   : ""
#  - g_dyn_table_find_all_float_const:
#      IGNORE   : ""
#  - g_dyn_table_find_all_double_const:
#      IGNORE   : ""

 # jjepsen: might be redundant, removing from docs, but still included in binding.
 # - g_dyn_table_find_all_bool:
 #     TODO     : soon
 # - g_dyn_table_find_all_date:
 #     TODO     : soon
 # - g_dyn_table_find_all_string:
 #     TODO     : soon
 # - g_dyn_table_find_all_float:
 #     TODO     : soon
 # - g_dyn_table_find_all_double:
 #     TODO     : soon
 # - g_dyn_table_find_all_int:
 #     TODO     : soon # See FIXME in the code.
 #     NAMES    : findAll
 #     TITLE    : findAll*
 #     SUMMARY  : *g_dyn_table_find_all_xxx_summary
 #     DESCR    : >
 #                The method finds all occurences of a given value in a specific column.
 #                The rows are returned as a {@link class_dyn_tableview} object.
 #     SIGNATURE: |
 #                (TightdbView *)findAll:(TightdbView *)view column:(NSUInteger)col_ndx value:(int64_t)value
 #     PARAMS:
 #     - NAME   : col_ndx
 #       TYPES  : NSUInteger
 #       DESCR  : *g_dyn_table_find_all_xxx_parm1_descr
 #     - NAME   : value
 #       TYPES  : [BOOL, int64_t, float, double, time_t, NSString]
 #       DESCR  : *g_dyn_table_find_all_xxx_parm2_descr
 #     RETURN:
 #       TYPES  : TightdbView *
 #       DESCR  : *g_dyn_table_find_all_xxx_return_descr
 #     EXAMPLES:
 #     - CODE   : ex_objc_dyn_table_find_all_xxx
 #       DESCR  :

  - g_dyn_table_find_sorted_int:
      TODO     : later


  - g_dyn_table_get_sorted_view_const:
      IGNORE   : ""
  - g_dyn_table_get_sorted_view:
      TODO     : later

      NAME     : getSortedView
      SUMMARY  : *g_dyn_table_get_sorted_view_summary
      DESCR    : *g_dyn_table_get_sorted_view_desc
      SIGNATURE: TableView get_sorted_view(NSUInteger column_ndx, bool ascending=true);
      PARAMS:
      - NAME   : column_ndx
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_get_sorted_view_parm1_descr
      - NAME   : ascending
        TYPES  : BOOL
        DESCR  : *g_dyn_table_get_sorted_view_parm2_descr
      RETURN:
        TYPES  : TightdbView *
        DESCR  : *g_dyn_table_get_sorted_view_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_get_sorted_view
        DESCR  :

  - g_dyn_table_distinct_const:
      IGNORE   : ""
  - g_dyn_table_distinct:
      NAMES    : "distinctValuesInColumnWithIndex:"
      SUMMARY  : *g_dyn_table_distinct_summary
      DESCR    : *g_dyn_table_distinct_desc
      SIGNATURE: -(TDBView *)distinctValuesInColumnWithIndex:(NSUInteger)colIndex;
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : NOTE! Currently only supported on TDBStringType columns.
      RETURN:
        TYPES  : TDBView *
        DESCR  : *g_dyn_table_distinct_return_desc
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_distinct
        DESCR  :

  - g_dyn_table_predicate:
      NAMES    : ["filterWithPredicate:", "filterWithPredicate:orderedBy:"] 
      SUMMARY  : Create a filtered TDBView using an NSPredicate and NSSortDescriptor
      DESCR    : >
                 These methods allow you to create a TDBView using an NSPredicate or an NSPredicate string.
                 The first variant takes a fully constructed NSPredicate and/or a NSSortDescriptor and creates
                 a TDBView. The second variant takes a string which is parsed into an NSPredicate. Both variants
                 support AND and OR compound predicats, and comparison of constant values against column names.
      SIGNATURE: |
                 -(TDBView *)filterWithPredicate:(NSPredicate *)predicate orderedBy:(NSSortDescriptor *)sort;
                 -(TDBView *)filterWithPredicate:(NSString *)predicateString;
      PARAMS:
      - NAME   : predicate
        TYPES  : NSPredicate
        DESCR  : NOTE! We only support compound predicates and those comparing columns to constant values.
      - NAME   : sort
        TYPES  : NSSortDescriptor
        DESCR  : NOTE! Sort only supported on columns of type TDBIntegerType, TDBBoolType and TDBDateType.
      - NAME   : predicateString
        TYPES  : NSString
        DESCR  : A string which is parsed as a NSPredicate
      RETURN:
        TYPES  : TDBView *
        DESCR  : The filtered and/or sorted view

  - g_dyn_table_where_const:
      IGNORE   : ""
  - g_dyn_table_where:
      NAME     : where
      SIGNATURE: (TDBQuery *) where
      SUMMARY  : *g_dyn_table_where_summary
      DESCR    : *g_dyn_table_where_descr
      RETURN:
        TYPES  : TDBQuery
        DESCR  : *g_dyn_table_where_return_descr
      EXAMPLES:
      - DESCR  : ""
        CODE   : ex_objc_dyn_table_where


- Aggregates:
  METHODS:
  - g_dyn_table_count_int:
      TODO     : later
      NAME     : countInt
  - g_dyn_table_count_float:
      TODO     : later
      NAME     : countFloat
  - g_dyn_table_count_double:
      TODO     : later
      NAME     : countDouble
  - g_dyn_table_count_string:
      TODO     : later
      NAME     : countRowsWith
      TITLE    : "countRowsWith*Column:inColumnWithIndex:"
      SUMMARY  : *g_dyn_table_count_summary
      DESCR    : *g_dyn_table_count_descr
      SIGNATURE: |
                 (NSUInteger)countRowsWithInt:(int64_t)anInt inColumnWithIndex:(NSUInteger)colIndex
                 (NSUInteger)countRowsWithFloat:(float)aFloat inColumnWithIndex:(NSUInteger)colIndex
                 (NSUInteger)countRowsWithDouble:(double)aDouble inColumnWithIndex:(NSUInteger)colIndex
                 (NSUInteger)countRowsWithString:(NSString *)aString inColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  :
        - TEXT : *g_dyn_table_count_parm1_descr0
        - TEXT : *g_dyn_table_count_parm1_descr1
      - NAME   : anInt
        TYPES  : int64_t
        DESCR  : *g_dyn_table_count_parm2_descr
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_count_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_count
        DESCR  :

  - g_dyn_table_sum_int:
  - g_dyn_table_sum_float:
  - g_dyn_table_sum_double:
      TODO     : later
      NAMES    : [sumInt, sumFloat, sumDouble]
      TITLE    : "sum*ColumnWithIndex:"
      SUMMARY  : *g_dyn_table_sum_summary
      DESCR    : *g_dyn_table_sum_descr
      SIGNATURE: |
                 (int64_t)sumIntColumnWithIndex:(NSUInteger)colIndex
                 (double)sumFloatColumnWithIndex:(NSUInteger)colIndex
                 (double)sumDoubleColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_sum_parm1_descr
      RETURN:
        TYPES  : [int64_t, double]
        DESCR  : *g_dyn_table_sum_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_sum
        DESCR  :

  - g_dyn_table_maximum_int:
  - g_dyn_table_maximum_float:
  - g_dyn_table_maximum_double:
      TODO     : later
      NAMES    : [maxInt, maxFloat, maximumDouble]
      TITLE    : "max*InColumnWithIndex:"
      SUMMARY  : *g_dyn_table_maximum_summary
      DESCR    : *g_dyn_table_maximum_descr
      SIGNATURE: |
                 (int64_t)maxIntInColumnWithIndex:(NSUInteger)colIndex
                 (float)maxFloatInColumnWithIndex:(NSUInteger)colIndex
                 (double)maxDoubleInColumnWithIndex:(NSUInteger)colIndex
      CONST    : True
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_maximum_parm1_descr
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : *g_dyn_table_maximum_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_maximum
        DESCR  :

  - g_dyn_table_minimum_int:
  - g_dyn_table_minimum_float:
  - g_dyn_table_minimum_double:
      TODO     : later
      NAMES    : [minInt, minimumFloat, minimumDouble]
      TITLE    : "min*InColumnWithIndex:"
      SUMMARY  : *g_dyn_table_minimum_summary
      DESCR    : *g_dyn_table_minimum_descr
      SIGNATURE: |
                 (int64_t)minIntInColumnWithIndex:(NSUInteger)colIndex
                 (float)minFloatInColumnWithIndex:(NSUInteger)colIndex
                 (double)minDoubleInColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_maximum_parm1_descr
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : *g_dyn_table_minimum_return_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_minimum
        DESCR  :

  - g_dyn_table_average_int:
  - g_dyn_table_average_float:
  - g_dyn_table_average_double:
      TODO     : later
      NAMES    : [avgInt, averageFloat, averageDouble]
      TITLE    : "avg*ColumnWithIndex:"
      SUMMARY  : *g_dyn_table_average_summary
      DESCR    : *g_dyn_table_average_descr
      SIGNATURE: |
                 (double)avgIntColumnWithIndex:(NSUInteger)colIndex
                 (double)avgFloatColumnWithIndex:(NSUInteger)colIndex
                 (double)avgDoubleColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_maximum_parm1_descr
      RETURN:
        TYPES  : double
        DESCR  : *g_dyn_table_average_return1_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_average
        DESCR  :


- Dump:
  METHODS:
  - g_dyn_table_to_json:
      TODO     : later

      NAMES    : toJSON
      SUMMARY  : *g_dyn_table_to_json_summary
      DESCR    : *g_dyn_table_to_json_descr
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_to_json
        DESCR  :

  - g_dyn_table_to_string:
      TODO     : later

      NAMES    : toString
      SUMMARY  : *g_dyn_table_to_string_summary
      DESCR    : *g_dyn_table_to_string_descr
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      - NAME   : limit
        TYPES  : NSUInteger
        DESCR  : *g_dyn_table_to_string_parm2_descr
      EXAMPLES:
      - CODE   : ex_objc_dyn_table_to_string
        DESCR  :

  - g_dyn_table_row_to_string:
      TODO     : later
