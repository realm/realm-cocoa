#
# C++ reference documentation for Table class
#

ID         : class_dyn_table
TITLE      : Table (dynamic)
SUMMARY    : &g_dyn_table_intro_summary
             TightDB table.
DESCR      : &g_dyn_table_intro_descr
             The Table class is the core class of the TightDB framework. It allows you
             to efficiently work with data in terms of rows and columns. The value of
             a cell (specific column, specific row) is compacted in order to keep the
             overall memory consumption as little as possible. The internal data structure
             is optimized so retrieving a particular row in a table is as fast as possible
             (often faster than native data structures).

             The dynamic table can be used when the structure of the data is not known a
             priori. This situation is common if you recieve data for different sources, and
             these sources changes often. You can say that a dynamic table resembles the
             flexible data structures often found in dynamic languages like PHP and JavaScript.

             You can add and remove columns at run time as your application requires it. When you
             add a column, a type must be specified. The most common types including integers,
             timestamps and strings are suppotted. It is possible to use a TightDB table class
             as column type. This means that you can have tables of tables structure.

             Moreover, TightDB introduces a column type called {@link class_mixed}. A value of the
             Mixed type can be any supported value of TightDB. This implies - as the name
             indicates - that you can mix the type of values in the the column. In one row the
             value could be an integer, in another row the value could be a string or even a table.

             It is possible to query a dynamic table using {@link class_dyn_query} objects. The result
             set is often stored in a {@link class_dyn_tableview} object.
SEE        :
EXAMPLES   :
- DESCR:
  CODE     : ex_cpp_dyn_table_intro
IGNORE     : []                   # List of method-ids to ignore
CATEGORIES :
- State:
  METHODS:
  - g_dyn_table_size:
      NAMES    : size
      SUMMARY  : &g_dyn_table_size_summary
                 Number of rows.
      DESCR    : &g_dyn_table_size_descr
                 This method gets the number of rows in a table.
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_size
        DESCR  :
  - g_dyn_table_is_empty:
      NAMES    : is_empty
      SUMMARY  : &g_dyn_table_is_empty_summary
                 Is table empty?
      DESCR    : &g_dyn_table_is_empty_descr
                 This method checks if the table is empty that is, it has zero rows.
      CONST    : True
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if empty, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_is_empty
        DESCR  :
  - g_dyn_table_is_valid:
      NAMES    : is_valid
      SUMMARY  : &g_dyn_table_is_valid_summary
                 Is table valid/consistent?
      DESCR    : &g_dyn_table_is_valid_descr
                 This method will perform a number of consistency checks on a table and its
                 columns.
      CONST    : true
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if table is valid, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_is_valid
        DESCR  :
- Table:
  METHODS:
  - g_dyn_table_clear:
      NAMES    : clear
      SUMMARY  : &g_dyn_table_clear_summary
                 Remove all rows.
      DESCR    : &g_dyn_table_clear_descr
                 This method will remove all rows in a table.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_clear
        DESCR  :
  - g_dyn_table_optimize:
      NAMES    : optimize
      SUMMARY  : &g_dyn_table_optimize_summary
                 Optimize a table.
      DESCR    : &g_dyn_table_optimize_descr
                 This method will optimize the internal data structures of a table.
                 The result is that the table will consume less memory and queries might
                 be faster.

                 This should be called as soon as there is an representative amount of
                 data in the table. The table will then reorganize itself into the most
                 effective format.

                 What is learned about the contents will be used in all future operations,
                 so you only need to call optimize once.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_optimize
        DESCR  :
  - g_dyn_table_opertator==:
      NAMES    : operator==
      SUMMARY  : &g_dyn_table_operator_eq_summary
                 Compare two tables.
      DESCR    : &g_dyn_table_operator_eq_descr
                 Compare two tables for equality. Two tables are equal if, and
                 only if, they contain the same columns and rows in the same
                 order, that is, for each value V of type T at column index C
                 and row index R in one of the tables, there is a value of type
                 T at column index C and row index R in the other table that
                 is equal to V. This method returns true if two tables are identical.
      CONST    : True
      PARAMS:
      - NAME   : table
        TYPES  : const Table&
        DESCR  : The other table.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if the two tables are equal, <code>false</code> otherwise,
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_operator==
        DESCR  :
  - g_dyn_table_opertator!=:
      NAMES    : operator!=
      SUMMARY  : &g_dyn_table_operator_neq_summary
                 Compare two tables.
      DESCR    : &g_dyn_table_operator_neq_descr
                 Compare two tables for equality. Two tables are equal if, and
                 only if, they contain the same columns and rows in the same
                 order, that is, for each value V of type T at column index C
                 and row index R in one of the tables, there is a value of type
                 T at column index C and row index R in the other table that
                 is equal to V. This method returns true if two tables are not identical.
      CONST    : True
      PARAMS:
      - NAME   : table
        TYPES  : const Table&
        DESCR  : The other table.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if the two tables are not equal, <code>false</code> otherwise,
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_operator!=
        DESCR  :
- Columns:
  METHODS:
  - g_dyn_table_get_column_count:
      NAMES    : get_column_count
      SUMMARY  : &g_dyn_table_get_column_count_summary
                 Get the number of columns.
      DESCR    : &g_dyn_table_get_column_count_descr
                 This method retrieves the number of columns.
      CONST    : True
      RETURN:
        TYPES  : size_t
        DESCR  : The number of columns.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_count
        DESCR  :
  - g_dyn_table_get_column_name:
      NAMES    : get_column_name
      SUMMARY  : &g_dyn_table_get_column_name_summary
                 Get the name of a column.
      DESCR    : &g_dyn_table_get_column_name_descr
                 This method gets the name of a column using the column index.
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      RETURN:
        TYPES  : const char*
        DESCR  : The column name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_name
        DESCR  :
  - g_dyn_table_get_column_index:
      NAMES    : get_column_index
      SUMMARY  : &g_dyn_table_get_column_index_summary
                 Get the index of a column.
      DESCR    : &g_dyn_table_get_column_index_descr
                 This method gets the index of a column using the column name.
      CONST    : True
      PARAMS:
      - NAME   : column_name
        TYPES  : const char*
        DESCR  : The column name.
      RETURN:
        TYPES  : size_t
        DESCR  : The column index or <code>std::size_t(-1)</code> if there is no column with the specified name.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_index
        DESCR  :
  - g_dyn_table_get_column_type:
      NAMES    : get_column_type
      SUMMARY  : &g_dyn_table_get_column_type_summary
                 Get the type of a column.
      DESCR    : &g_dyn_table_get_column_type_descr
                 >
                 This method gets the type of a column using the column index. Currently,
                 the following types are supported:
                 <ul>
                   <li><code>type_Bool</code></li>
                   <li><code>type_Int</code></li>
                   <li><code>type_Float</code></li>
                   <li><code>type_Double</code></li>
                   <li><code>type_String</code></li>
                   <li><code>type_Binary</code></li>
                   <li><code>type_Table</code></li>
                   <li><code>type_Date</code></li>
                   <li><code>type_Mixed</code></li>
                 </ul>
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      RETURN:
        TYPES  : DataType
        DESCR  : The column type.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_column_type
        DESCR  :
- Rows:
  METHODS:
  - g_dyn_table_add_empty_row:
      NAMES    : add_empty_row
      SUMMARY  : &g_dyn_table_add_empty_row_summary
                 Add empty rows.
      DESCR    : &g_dyn_table_add_empty_row_descr
                 This method adds one or more empty rows at the end of the table.
      SIGNATURE: |
                 void add_empty_row(size_t num_rows = 1)
      PARAMS:
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : "Number of rows to add (default: 1)."
  - g_dyn_table_insert_empty_row:
      NAMES    : insert_empty_row
      SUMMARY  : &g_dyn_table_insert_empty_row_summary
                 Insert empty rows.
      DESCR    : &g_dyn_table_insert_empty_row_descr
                 This method inserts one or more empty rows at a given position.
      SIGNATURE: |
                 void insert_empty_row(size_t row_ndx, size_t num_rows = 1)
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : Position to insert at.
      - NAME   : num_rows
        TYPES  : size_t
        DESCR  : "Number of rows to insert (default: 1)."
  - g_dyn_table_insert_bool:
  - g_dyn_table_insert_int:
  - g_dyn_table_insert_enum:
  - g_dyn_table_insert_date:
  - g_dyn_table_insert_string:
  - g_dyn_table_insert_binary:
  - g_dyn_table_insert_mixed:
  - g_dyn_table_insert_done:
      NAMES    : insert_*
      SUMMARY  : &g_dyn_table_insert_xxx_summary
                 Insert a value.
      DESCR    : &g_dyn_table_insert_xxx_descr
                 >
                 These methods are used to insert new rows in a table.

                 <strong>WARNING</strong>: These methods support inserts with maximal performance.
                 But they can easily corrupt the database if used incorrectly! When inserting
                 a new row, you have to call the corresponding insert method for <em>every</em> column in the table
                 and end the insert sequence by calling {@link g_dyn_table_insert_done insert_done()}.

                 <code>insert_binary()</code> will copy the data provided.

      SIGNATURE: |
                 void insert_bool(size_t column_ndx, size_t row_ndx, bool value)
                 void insert_int(size_t column_ndx, size_t row_ndx, int64_t value)
                 template<class E>void insert_enum(size_t column_ndx, size_t row_ndx, E value)
                 void insert_float(size_t column_ndx, size_t row_ndx, float value)
                 void insert_double(size_t column_ndx, size_t row_ndx, double value)
                 void insert_date(size_t column_ndx, size_t row_ndx, time_t value)
                 void insert_string(size_t column_ndx, size_t row_ndx, const char* value)
                 void insert_binary(size_t column_ndx, size_t row_ndx, const char* value, size_t len)
                 void insert_mixed(size_t column_ndx, size_t row_ndx, Mixed value)
                 void insert_subtable(size_t column_ndx, size_t row_ndx)
                 void insert_done()
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*, Mixed]
        DESCR  : The value to insert.
      - NAME   : len
        TYPES  : size_t
        DESCR  : Size in bytes of binary value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_insert_xxx
        DESCR  :
      SEE      : "For a safe way to insert rows, use {@link g_dyn_table_insert_empty_row}, and then set individual values in the columns."

  - g_dyn_table_remove_row:
      NAMES    : remove
      SUMMARY  : &g_dyn_table_remove_row_summary
                 Delete row.
      DESCR    : &g_dyn_table_remove_row_descr
                 This method deletes a specific row.
      SIGNATURE: void remove(size_t row_ndx);
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : Position of the row to delete.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove
        DESCR  :
  - g_dyn_table_remove_last_row:
      NAMES    : remove_last
      SUMMARY  : &g_dyn_table_remove_last_row_summary
                 Delete last row.
      DESCR    : &g_dyn_table_remove_last_row_descr
                 This method deletes the last row. Calling it on an empty table is an error.
      SIGNATURE: void remove_last();
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_remove_last_row
        DESCR  :
- Values:
  METHODS:
  - g_dyn_table_get_bool:
  - g_dyn_table_get_int:
  - g_dyn_table_get_date:
  - g_dyn_table_get_string:
  - g_dyn_table_get_binary:
  - g_dyn_table_get_mixed:
  - g_dyn_table_get_mixed_type:
  - g_dyn_table_get_subtable:
  - g_dyn_table_get_subtable_const:
      NAMES    : get_*
      SUMMARY  : &g_dyn_table_get_xxx_summary
                 Get value.
      DESCR    : &g_dyn_table_get_xxx_descr
                 This method will retrieve the value of a cell (row/column).
      SIGNATURE: |
                 bool          get_bool(size_t column_ndx, size_t row_ndx) const;
                 int64_t       get_int(size_t column_ndx, size_t row_ndx) const;
                 time_t        get_date(size_t column_ndx, size_t row_ndx) const;
                 float         get_float(size_t column_ndx, size_t row_ndx) const;
                 double        get_double(size_t column_ndx, size_t row_ndx) const;
                 const char*   get_string(size_t column_ndx, size_t row_ndx) const;
                 BinaryData    get_binary(size_t column_ndx, size_t row_ndx) const;
                 Mixed         get_mixed(size_t column_ndx, size_t row_ndx) const;
                 DataType      get_mixed_type(size_t column_ndx, size_t row_ndx) const

                 TableRef      get_subtable(size_t column_ndx, size_t row_ndx);
                 ConstTableRef get_subtable(size_t column_ndx, size_t row_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      RETURN:
        TYPES  : [bool, int64_t, float, double, time_t, const char*, BinaryData, Mixed, DataType]
        DESCR  : The value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_xxx
        DESCR  :
  - g_dyn_table_set_bool:
  - g_dyn_table_set_int:
  - g_dyn_table_set_enum:
  - g_dyn_table_set_date:
  - g_dyn_table_set_string:
  - g_dyn_table_set_binary:
  - g_dyn_table_set_mixed:
      NAMES    : set_*
      SUMMARY  : &g_dyn_table_set_xxx_summary
                 Set value.
      DESCR    : &g_dyn_table_set_xxx_descr
                 This method will set the value of an existing cell (row/column).
      SIGNATURE: |
                 void set_bool(size_t column_ndx, size_t row_ndx, bool value);
                 void set_int(size_t column_ndx, size_t row_ndx, int64_t value);
                 void set_float(size_t column_ndx, size_t row_ndx, float value);
                 void set_double(size_t column_ndx, size_t row_ndx, double value);
                 template<class E> void set_enum(size_t column_ndx, size_t row_ndx, E value);
                 void set_date(size_t column_ndx, size_t row_ndx, time_t value);
                 void set_string(size_t column_ndx, size_t row_ndx, const char* value);
                 void set_binary(size_t column_ndx, size_t row_ndx, const char* value, size_t len);
                 void set_mixed(size_t column_ndx, size_t row_ndx, Mixed value);
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*, Mixed]
        DESCR  : The value.
      - NAME   : len
        TYPES  : size_t
        DESCR  : Size in bytes of binary value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_set_xxx
        DESCR  :
- Sub-tables:
  METHODS:
  - g_dyn_table_get_subtable_size:
      NAMES    : get_subtable_size
      SUMMARY  : &g_dyn_table_get_subtable_size_summary
                 Get subtable
      DESCR    : &g_dyn_table_get_subtable_size_descr
                 The value of a cell can be a table. Such a value is referred to as
                 a subtable. This method retrieves the number of rows of a subtable.
      CONST    : true
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      RETURN:
        TYPES  : size_t
        DESCR  : Number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_subtable
        DESCR  :
  - g_dyn_table_clear_subtable:
      NAMES    : clear_subtable
      SUMMARY  : &g_dyn_table_clear_subtable_summary
                 Get subtable
      DESCR    : &g_dyn_table_clear_subtable_descr
                 The value of a cell can be a table. Such a value is referred to
                 as a subtable. This method deletes all rows of such a subtable.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_clear_subtable
        DESCR  :
- Indexes:
  METHODS:
  - g_dyn_table_set_index:
      NAMES    : set_index
      SUMMARY  : &g_dyn_table_set_index_summary
                 Add an index to a column.
      DESCR    : &g_dyn_table_set_index_descr
                 This method adds an index to a column, and queries will be faster but the table
                 will require more memory.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : update_spec
        TYPES  : bool
        DESCR  : "If <code>true</code>, the table spec will be updated. Default: <code>true</code>."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_set_index
        DESCR  :
  - g_dyn_table_has_index:
      NAMES    : has_index
      SUMMARY  : &g_dyn_table_has_index_summary
                 Is column indexed?
      DESCR    : &g_dyn_table_has_index_descr
                 This method checks if a specific column has an index.
      CONST    : true
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if column is indexed, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_has_index
        DESCR  :
- Searching:
  METHODS:
  - g_dyn_table_lookup:
      NAMES    : lookup
      SUMMARY  : &g_dyn_table_lookup_summary
                 Lookup a value.
      DESCR    : &g_dyn_table_lookup_descr
                 This method will find the first row where the value of first column matches
                 a given string value. Defining the first column as a string with unique values,
                 it is possible to combine such a table with this method to emulate a hash
                 array using TightDB.
      CONST    : True
      PARAMS:
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value to search for.
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_lookup
        DESCR  :
  - g_find_first_bool:
  - g_find_first_int:
  - g_find_first_date:
  - g_find_first_string:
      NAMES    : find_first_*
      SUMMARY  : Find first matching row.
      DESCR    : The method finds the first occurence of a given value in a column.
      SIGNATURE: |
                 size_t find_first_int(size_t column_ndx, int64_t value) const;
                 size_t find_first_bool(size_t column_ndx, bool value) const;
                 size_t find_first_date(size_t column_ndx, time_t value) const;
                 size_t find_first_string(size_t column_ndx, const char* value) const;
                 size_t find_first_float(size_t column_ndx, float value) const;
                 size_t find_first_double(size_t column_ndx, double value) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*]
        DESCR  : The value.
      RETURN:
        TYPES  : size_t
        DESCR  : "The row index or <code>tightdb::not_found</code> (equal to <code>std::size_t(-1)</code>) if there is no match."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_find_first_xxx
        DESCR  :
  - g_find_all_bool:
  - g_find_all_int:
  - g_find_all_date:
  - g_find_all_string:
  - g_find_all_float:
  - g_find_all_double:
  - g_find_all_bool_const:
  - g_find_all_int_const:
  - g_find_all_date_const:
  - g_find_all_string_const:
  - g_find_all_float_const:
  - g_find_all_double_const:
      NAMES    : find_all_*
      SUMMARY  : *g_find_all_xxx_summary
      DESCR    : >
                 The method finds all occurences of a given value in a specific column.
                 The rows are returned as a {@link class_dyn_tableview} object.
      SIGNATURE: |
                 TableView      find_all_int(size_t column_ndx, int64_t value);
                 TableView      find_all_bool(size_t column_ndx, bool value);
                 TableView      find_all_date(size_t column_ndx, time_t value);
                 TableView      find_all_string(size_t column_ndx, const char* value);
                 TableView      find_all_float(size_t column_ndx, float value);
                 TableView      find_all_double(size_t column_ndx, double value);

                 ConstTableView find_all_int(size_t column_ndx, int64_t value) const;
                 ConstTableView find_all_bool(size_t column_ndx, bool value) const;
                 ConstTableView find_all_date(size_t column_ndx, time_t value) const;
                 ConstTableView find_all_string(size_t column_ndx, const char* value) const;
                 ConstTableView find_all_float(size_t column_ndx, float value) const;
                 ConstTableView find_all_double(size_t column_ndx, double value) const;

      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, time_t, const char*]
        DESCR  : The value.
      RETURN:
        TYPES  : TableView
        DESCR  : The view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_find_all_xxx
        DESCR  :
  - g_dyn_table_get_sorted_view:
  - g_dyn_table_get_sorted_view_const:
      NAMES    : get_sorted_view
      SUMMARY  : &g_dyn_table_get_sorted_view_summary
                 Sort the table.
      DESCR    : &g_dyn_table_get_sorted_view_desc
                 This method will sort the rows by using values of a given column.
                 The rows are returned as a {@link class_dyn_tableview} object.
      SIGNATURE: |
                 TableView      get_sorted_view(size_t column_ndx, bool ascending=true);
                 ConstTableView get_sorted_view(size_t column_ndx, bool ascending=true) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      - NAME   : ascending
        TYPES  : bool
        DESCR  : &cpp_dyn_table_get_sorted_view_param
                 "If <code>true</code>, rows are sorted ascending, otherwise descending. Default: <code>true</code>."
      RETURN:
        TYPES  : TableView
        DESCR  : A view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_get_sorted_view
        DESCR  :
  - g_dyn_table_distinct:
  - g_dyn_table_distinct_const:
      NAMES    : distinct
      SUMMARY  : &g_dyn_table_distinct_summary
                 Get distinct rows.
      DESCR    : &g_dyn_table_distinct_desc
                 >
                 This method will return a view with distinct rows for a given column
                 (first matching row for each unique value in column).
                 The rows are returned as a {@link class_dyn_tableview} object.
      SIGNATURE: |
                 TableView      distinct(size_t column_ndx);
                 ConstTableView distinct(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : The column index.
      RETURN:
        TYPES  : TableView
        DESCR  : A view.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_distinct
        DESCR  :
  - g_dyn_table_where:
  - g_dyn_table_where_const:
      NAMES    : [where, where]
      SIGNATURE: |
                 Query       where()
                 const Query where() const
      SUMMARY  : Query table.
      DESCR    : This method initiates a query. See {@link class_dyn_query}.
      RETURN:
        TYPES  : [Query, const Query]
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_table_where
- Aggregates:
  METHODS:
  - g_dyn_table_count_int:
      NAMES    : count_int
      SUMMARY  : &g_dyn_table_count_summary
                 Number of matching rows.
      DESCR    : &g_dyn_table_count_descr
                 This method gets the number of rows matching a value. It is useful
                 to determine the number briefly compared to using a {@link class_dyn_query}
                 object.
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : target
        TYPES  : int64_t
        DESCR  : The value.
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_count
        DESCR  :
  - g_dyn_table_count_string:
      NAMES    : count_string
      SUMMARY  : &g_dyn_table_count_string_summary
                 Number of matching rows.
      DESCR    : &g_dyn_table_count_string_descr
                 This method gets the number of rows matching a string value. It is useful
                 to determine the number briefly compared to using a {@link class_dyn_query}
                 object.
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : target
        TYPES  : const char*
        DESCR  : The value.
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_count_string
        DESCR  :
  - g_dyn_table_sum:
  - g_dyn_table_sum_float:
  - g_dyn_table_sum_double:
      NAMES    : [sum, sum_float, sum_double]
      SUMMARY  : &g_dyn_table_sum_summary
                 Calculates the sum.
      DESCR    : &g_dyn_table_sum_descr
                 This method calculates the sum of a specific column.
      SIGNATURE: |
                 int64_t sum(size_t column_ndx) const;
                 double  sum_float(size_t column_ndx) const;
                 double  sum_double(size_t column_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : [int64_t, double]
        DESCR  : The sum.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_sum
        DESCR  :
  - g_dyn_table_maximum:
  - g_dyn_table_maximum_float:
  - g_dyn_table_maximum_double:
      NAMES    : [maximum, maximum_float, maximum_double]
      SUMMARY  : &g_dyn_table_maximum_summary
                 Find highest value.
      DESCR    : &g_dyn_table_maximum_descr
                 The method finds the highest value.
      SIGNATURE: |
                 int64_t maximum(size_t column_ndx) const;
                 float   maximum_float(size_t column_ndx) const;
                 double  maximum_double(size_t column_ndx) const;
      CONST    : True
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The maximum value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_maximum
        DESCR  :
  - g_dyn_table_minimum:
  - g_dyn_table_minimum_float:
  - g_dyn_table_minimum_double:
      NAMES    : [minimum, minimum_float, minimum_double]
      SUMMARY  : &g_dyn_table_minimum_summary
                 Find lowest value.
      DESCR    : &g_dyn_table_minimum_descr
                 The method finds the lowest value.
      CONST    : True
      SIGNATURE: |
                 int64_t minimum(size_t column_ndx) const;
                 float   minimum_float(size_t column_ndx) const;
                 double  minimum_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The minimum value.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_minimum
        DESCR  :
  - g_dyn_table_average:
  - g_dyn_table_average_float:
  - g_dyn_table_average_double:
      NAMES    : [average, average_float, average_double]
      SUMMARY  : &g_dyn_table_average_summary
                 Calculates the average.
      DESCR    : &g_dyn_table_average_descr
                 This method calculates the average for a column.
      CONST    : True
      SIGNATURE: |
                 double  average(size_t column_ndx) const;
                 double  average_float(size_t column_ndx) const;
                 double  average_double(size_t column_ndx) const;
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : double
        DESCR  : The average
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_average
        DESCR  :
- Dump:
  METHODS:
  - g_dyn_table_to_json:
      NAMES    : to_json
      SUMMARY  : &g_dyn_table_to_json_summary
                 Convert table to JSON.
      DESCR    : &g_dyn_table_to_json_descr
                 The JavaScript Object Notation (<a href="http://json.org">JSON</a>) is useful
                 for web/mobile applications and serialization. This method will convert a table
                 and its columns and rows to a JSON compatible representation.
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_json
        DESCR  :
  - g_dyn_table_to_string:
      NAMES    : to_string
      SUMMARY  : &g_dyn_table_to_string_summary
                 Convert table to a string.
      DESCR    : &g_dyn_table_to_string_descr
                 >
                 This method will convert a table and its columns and rows to a format
                 which is easily read by humans.
      CONST    : true
      PARAMS:
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "The number of rows to convert. Default: 500."
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_string
        DESCR  :
  - g_dyn_table_row_to_string:
      NAMES    : to_string
      SUMMARY  : &g_dyn_table_row_to_string_summary
                 Convert a row to a string.
      DESCR    : &g_dyn_table_row_to_string_descr
                 >
                 This method will convert a row to a format
                 which is easily read by humans.
      CONST    : true
      PARAMS:
      - NAME   : row_ndx
        TYPES  : size_t
        DESCR  : The row index.
      - NAME   : out
        TYPES  : std::ostream&
        DESCR  : Output stream.
      EXAMPLES:
      - CODE   : ex_cpp_dyn_table_to_string
        DESCR  :
