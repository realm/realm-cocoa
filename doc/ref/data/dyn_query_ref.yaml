#
# Obj-C reference documentation for Query class
#

## TODO: Describe limitations about using correct versions of the methods on the right column_types.
## TODO: Detail what is allowed to pass in parameters (index within size() etc)
## TODO: Describe start, end index parameters in searches. end is not inclusive.

## JJEPSEN: "or" a obj-c keyword?
## JJEPSEN: count() does not take a column index as parameter (like in c++)
## JJEPSEN: max, min not defined for time compare as in c++.
## !! Do we at all have a dynamic query interface?
## !! All the Conditions don't take a colIndex...
## All the Combiners return (void) - don't they return TDBQuery ? - check-&-fix

## NOTICE:
##  The constructor (initWithTable) is not documented as the user
##  should never call it explicitely.

ID         : class_dyn_query
TITLE      : TDBQuery  (dynamic)
SUMMARY    : *g_dyn_query_intro_summary
DESCR      : *g_dyn_query_intro_descr
SEE        :
EXAMPLES   :
- DESCR:
  CODE     : ex_objc_query_dynamic_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES :
- Conditions:
  METHODS:
  - g_dyn_query_equals_binary:
#      TODO     : soon
      NAME     : "binaryIsEqualTo:inColumnWithIndex:"
  - g_dyn_query_equals_boolean:
#      TODO     : soon
      NAME     : "BoolIsEqualTo:inColumnWithIndex:"
  - g_dyn_query_equals_integer:
#      TODO     : soon
      NAME     : "intIsEqualTo:inColumnWithIndex:"
  - g_dyn_query_equals_float:
#      TODO     : soon
      NAME     : "floatIsEqualTo:inColumnWithIndex:"
  - g_dyn_query_equals_double:
#      TODO     : soon
      NAME     : "doubleIsEqualTo:inColumnWithIndex:"
  - g_dyn_query_equals_string:
#      TODO     : soon
      NAME     : "stringIsEqualTo:inColumnWithIndex:"
  - g_dyn_query_equals_string_2:
#      TODO     : soon
      NAME     : "stringIsCaseInsensitiveEqualTo:inColumnWithIndex:"
  - g_dyn_query_equals_date:
      NAME     : "dateIsEqualTo:inColumnWithIndex:"
      TITLE    : "*IsEqualTo:inColumnWithIndex:"
# Not yet implemented in API
#      TODO     : soon
#      NAMES    : [ equal, equal, equal, equal, equal, equal, equal]
      SIGNATURE: |
                  (TDBQuery *)boolIsEqualTo:(bool)aBool inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)intIsEqualTo:(int64_t)anInt inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)floatIsEqualTo:(float)aFloat inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)doubleIsEqualTo:(double)aDouble inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)stringIsEqualTo:(NSString *)aString inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)stringIsCaseInsensitiveEqualTo:(NSString *)aString inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)dateIsEqualTo:(time_t)aDate inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)binaryIsEqualTo:(NSData *)aBinary inColumnWithIndex:(NSUInteger)colIndex
      SUMMARY  : *g_dyn_query_equals_summary
      DESCR    : *g_dyn_query_equals_descr
      PARAMS:
      - NAME   : value
        TYPES  : [BOOL, int64_t, float, double, NSString*, BinaryData, time_t]
        DESCR  : *g_dyn_query_value_descr
      - NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_equals

  - g_dyn_query_notEquals_bool:
      NAME     : "isNotEqualToBoolean:"
  - g_dyn_query_notEquals_binary:
      NAME     : "isNotEqualToBinary:"
  - g_dyn_query_notEquals_integer:
      NAME     : "isNotEqualToInteger:"
  - g_dyn_query_notEquals_float:
      NAME     : "isNotEqualToFloat:"
  - g_dyn_query_notEquals_double:
      NAME     : "isNotEqualToDouble:"
  - g_dyn_query_notEquals_string:
      NAME     : "isNotEqualToString"
  - g_dyn_query_notEquals_string_2:
      NAME     : "isNotEqualToString:caseSensitive:"
  - g_dyn_query_notEquals_date:
      NAME     : "isNotEqualToDate:"
      TITLE    : "*IsNotEqualTo:inColumnWithIndex:"
      SIGNATURE: |
                  (TDBQuery *)intIsNotEqualTo:(int64_t)anInt inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)floatIsNotEqualTo:(float)aFloat inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)doubleIsNotEqualTo:(double)aDouble inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)stringIsNotEqualTo:(NSString *)aString inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)stringIsNotCaseInsensitiveEqualTo:(NSString *)aString inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)dateIsNotEqualTo:(time_t)aDate inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)binaryIsNotEqualTo:(NSData *)aBinary inColumnWithIndex:(NSUInteger)colIndex
      SUMMARY  : *g_dyn_query_notEquals_summary
      DESCR    : *g_dyn_query_notEquals_descr
      PARAMS:
      - NAME   : value
        TYPES  : [BOOL, int64_t, float, double, NSString*, NSDate, NSData]
        DESCR  : *g_dyn_query_value_descr
      - NAME   : inColunmWithIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_notEquals

  - g_dyn_query_between_integer:
      NAME     : "intIsBetween::inColumnWithIndex:"
  - g_dyn_query_between_float:
      NAME     : "floatIsBetween::inColumnWithIndex:"
  - g_dyn_query_between_double:
      NAME     : "doubleIsBetween::inColumnWithIndex:"
  - g_dyn_query_between_date:
      NAME     : "dateIsbetween::inColumnWithIndex:"
      TITLE    : "*IsBetween::inColumnWithIndex:"
      SIGNATURE: |
                 (TDBQuery *)dateIsBetween:(NSDate *)lower :(NSDate *)upper inColumnWithIndex:(NSUInteger)colIndex
                 (TDBQuery *)intIsBetween:(int64_t)lower :(int64_t)upper inColumnWithIndex:(NSUInteger)colIndex
                 (TDBQuery *)floatIsBetween:(float)lower :(float)upper inColumnWithIndex:(NSUInteger)colIndex
                 (TDBQuery *)doubleIsBetween:(double)lower :(double)upper inColumnWithIndex:(NSUInteger)colIndex
      SUMMARY  : *g_dyn_query_greaterThan_summary
      DESCR    : *g_dyn_query_greaterThan_descr
      PARAMS:
      - NAME   : lower
        TYPES  : [int64_t, float, double, NSDate]
        DESCR  : Lower bound (bound included).
      - NAME   : upper
        TYPES  : [int64_t, float, double, NSDate]
        DESCR  : Upper bound (bound included).
      - NAME   : inColumnWithIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_greaterThan

  - g_dyn_query_greaterThan_integer:
      NAME     : "intIsGreaterThan:"
  - g_dyn_query_greaterThan_float:
      NAME     : "floatIsGreaterThan:"
  - g_dyn_query_greaterThan_double:
      NAME     : "doubleIsGreaterThan:"
  - g_dyn_query_greaterThan_date:
      NAME     : "isGreaterThanDate:"
      TITLE    : "*IsGreaterThan:inColumnWithIndex:"
      SIGNATURE: |
                 (TDBQuery *)dateIsGreaterThan:(NSDate)aDate inColumnWithIndex:(NSUInteger)colIndex
                 (TDBQuery *)intIsGreaterThan:(int64_t)anInt inColumnWithIndex:(NSUInteger)colIndex
                 (TDBQuery *)floatIsGreaterThan:(float)aFloat inColumnWithIndex:(NSUInteger)colIndex
                 (TDBQuery *)doubleIsGreaterThan:(double)aDouble inColumnWithIndex:(NSUInteger)colIndex
      SUMMARY  : *g_dyn_query_greaterThan_summary
      DESCR    : *g_dyn_query_greaterThan_descr
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, NSDate]
        DESCR  : *g_dyn_query_value_descr
      - NAME   : inColumnWithIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_greaterThan

  - g_dyn_query_greaterThanOrEqual_integer:
      NAME     : "intIsGreaterThanOrEqualTo:"
  - g_dyn_query_greaterThanOrEqual_float:
      NAME     : "floatIsGreaterThanOrEqualTo:"
  - g_dyn_query_greaterThanOrEqual_double:
      NAME     : "doubleIsGreaterThanOrEqualTo:"
  - g_dyn_query_greaterThanOrEqual_date:
      NAME     : "dateIsGreaterThanOrEqualTo:"
      TITLE    : "*IsGreaterThanOrEqualTo:inColumnWithIndex:"
      SIGNATURE: |
                  (TDBQuery *)dateIsGreaterThanOrEqualTo:(NSDate)aDate inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)intIsGreaterThanOrEqualTo:(int64_t)anInt inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)floatIsGreaterThanOrEqualTo:(float)aFloat inColumnWithIndex:(NSUInteger)colIndex
                  (TDBQuery *)doubleIsGreaterThanOrEqualTo:(double)aDouble inColumnWithIndex:(NSUInteger)colIndex
      SUMMARY  : *g_dyn_query_greaterThanOrEqual_summary
      DESCR    : *g_dyn_query_greaterThanOrEqual_descr
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, NSDate]
        DESCR  : *g_dyn_query_value_descr
      - NAME   : inColumnWithIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_greaterThanOrEqual

  - g_dyn_query_lessThan_integer:
      NAME     : "intIsLessThan:"
  - g_dyn_query_lessThan_float:
      NAME     : "floatIsLessThan:"
  - g_dyn_query_lessThan_double:
      NAME     : "doubleIsLessThan:"
  - g_dyn_query_lessThan_date:
      NAME     : "dateIsLessThan:"
      TITLE    : "*IsLessThan:inColumnWithIndex:"
      SIGNATURE: |
                  (TDBQuery *)dateIsLessThan:(NSDate)aDate inColumnWithIndex:(NSUInteger)colIndex;
                  (TDBQuery *)intIsLessThan:(int64_t)anInt inColumnWithIndex:(NSUInteger)colIndex;
                  (TDBQuery *)floatIsLessThan:(float)aFloat inColumnWithIndex:(NSUInteger)colIndex;
                  (TDBQuery *)doubleIsLessThan:(double)aDouble inColumnWithIndex:(NSUInteger)colIndex;
      SUMMARY  : *g_dyn_query_lessThan_summary
      DESCR    : *g_dyn_query_lessThan_descr
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, NSDate]
        DESCR  : *g_dyn_query_value_descr
      - NAME   : inColumnWithIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr

      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_lessThan

  - g_dyn_query_lessThanOrEqual_integer:
      NAME     : "intIsLessThanOrEqualTo:"
  - g_dyn_query_lessThanOrEqual_float:
      NAME     : "floatIsLessThanOrEqualTo:"
  - g_dyn_query_lessThanOrEqual_double:
      NAME     : "doubleIsLessThanOrEqualTo:"
  - g_dyn_query_lessThanOrEqual_date:
      NAME     : "dateIsLessThanOrEqualTo:"
      TITLE    : "*IsLessThanOrEqualTo:inColumnWithIndex:"
      SIGNATURE: |
                  (TDBQuery *)dateIsLessThanOrEqualTo:(NSDate)aDate inColumnWithIndex:(NSUInteger)colIndex;
                  (TDBQuery *)intIsLessThanOrEqualTo:(int64_t)anInt inColumnWithIndex:(NSUInteger)colIndex;
                  (TDBQuery *)floatIsLessThanOrEqualTo:(float)aFloat inColumnWithIndex:(NSUInteger)colIndex;
                  (TDBQuery *)doubleIsLessThanOrEqualTo:(double)aDouble inColumnWithIndex:(NSUInteger)colIndex;
      SUMMARY  : *g_dyn_query_lessThanOrEqual_summary
      DESCR    : *g_dyn_query_lessThanOrEqual_descr
      PARAMS:
      - NAME   : value
        TYPES  : [int64_t, float, double, NSDate]
        DESCR  : *g_dyn_query_value_descr
      - NAME   : inColumnWithIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_lessThanOrEqual



# FIXME: This is not correct but implementation should change
  - g_dyn_query_startsWith_binary:
      TODO     : soon
  - g_dyn_query_startsWith_string:
      TODO     : soon
      NAME     : columnBeginsWith
  - g_dyn_query_startsWith_string_2:
      TODO     : soon
      NAME     : beginsWith
      SIGNATURE: |
                 (TDBQuery *)columnBeginsWith:(NSString *)value
      DESCR    : *g_dyn_query_startsWith_descr
      SUMMARY  : *g_dyn_query_startsWith_summary
      PARAMS:
      - NAME   : col_ndx
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      - NAME   : value
        TYPES  : NSString *
        DESCR  : *g_dyn_query_value_descr
      - NAME   : caseSensitive
        TYPES  : BOOL
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : TDBQuery
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_startsWith

  - g_dyn_query_endsWith_binary:
      TODO     : soon
  - g_dyn_query_endsWith_string:
      TODO     : soon
      NAME     : endsWith
  - g_dyn_query_endsWith_string_2:
      TODO     : soon
      NAME     : columnEndsWith
      SIGNATURE: |
                 (TDBQuery *)columnEndsWith:(NSString *)value caseSensitive:(BOOL)caseSensitive
      DESCR    : *g_dyn_query_endsWith_descr
      SUMMARY  : *g_dyn_query_endsWith_summary
      PARAMS:
      - NAME   : col_ndx
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      - NAME   : value
        TYPES  : NSString*
        DESCR  : *g_dyn_query_value_descr
      - NAME   : caseSensitive
        TYPES  : BOOL
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_endsWith

  - g_dyn_query_contains_binary:
      TODO     : soon
  - g_dyn_query_contains_string:
      NAME     : contains
      TODO     : soon
  - g_dyn_query_contains_string_2:
      TODO     : soon
      NAME     : columnContains
      SIGNATURE: |
                 (TDBQuery *)columnContains:(NSString *)value caseSensitive:(BOOL)caseSensitive
                 (TDBQuery *)columnContains:(NSString *)value
      DESCR    : *g_dyn_query_contains_descr
      SUMMARY  : *g_dyn_query_contains_summary
      PARAMS:
      - NAME   : col_ndx
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      - NAME   : value
        TYPES  : NSString *
        DESCR  : *g_dyn_query_value_descr
      - NAME   : caseSensitive
        TYPES  : BOOL
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_contains


- Combiners:
  METHODS:
  - g_dyn_query_group:
      NAMES    : group
      DESCR    : *g_dyn_query_group_descr
      SUMMARY  : *g_dyn_query_group_summary
      SIGNATURE: (TDBQuery *)group
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_group

  - g_dyn_query_endGroup:
      NAMES    : endGroup
      DESCR    : *g_dyn_query_endGroup_descr
      SUMMARY  : *g_dyn_query_endGroup_summary
      SIGNATURE: (TDBQuery *)endgroup
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_group

  - g_dyn_query_or:
      NAMES    : Or
      DESCR    : *g_dyn_query_or_descr
      SUMMARY  : *g_dyn_query_or_summary
      SIGNATURE: (TDBQuery *)Or
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_or

  - g_dyn_query_subtable:
      NAMES    : "subtableInColumnWithIndex:"
      DESCR    : *g_dyn_query_subtable_descr
      SUMMARY  : *g_dyn_query_subtable_summary
      SIGNATURE: (TDBQuery *)subtableInColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
        NAME   : colIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_column_index_descr
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_subtable

  - g_dyn_query_endSubtable:
      NAMES    : parent
      DESCR    : *g_dyn_query_endSubtable_descr
      SUMMARY  : *g_dyn_query_endSubtable_summary
      SIGNATURE: (TDBQuery *)parent
      RETURN:
        TYPES  : TDBQuery *
        DESCR  : *g_dyn_query_return_query_object_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_subtable


- Actions:
  METHODS:
  - g_dyn_query_find_all_const:
      IGNORE   : ""
  - g_dyn_query_find_all_2:
      TODO     : later
  - g_dyn_query_find_all:
      NAME     : findAllRows
      DESCR    : *g_dyn_query_find_all_descr
      SUMMARY  : *g_dyn_query_find_all_summary
      SIGNATURE: |
                 (TDBView *)findAllRows
#      PARAMS:
#      - NAME   : start
#        TYPES  : NSUInteger
#        DESCR  : *g_dyn_query_find_all_parm1_descr
#      - NAME   : end
#        TYPES  : NSUInteger
#        DESCR  : *g_dyn_query_find_all_parm2_descr
#      - NAME   : limit
#        TYPES  : NSUInteger
#        DESCR  : *g_dyn_query_find_all_parm3_descr
      RETURN:
        TYPES  : TDBView *
        DESCR  : A <code>TDBView</code> with the matching rows.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_findall

  - g_dyn_query_find:
      NAMES    : "indexOfFirstMatchingRowFromIndex:"
      DESCR    : *g_dyn_query_find_descr
      SUMMARY  : *g_dyn_query_find_summary
      SIGNATURE: |
                 (NSUInteger)indexOfFirstMatchingRowFromIndex:(NSUInteger)rowIndex
      PARAMS:
      - NAME   : rowIndex
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_find_parm1_descr
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_find_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_find

  - g_dyn_query_find_first:
      NAMES    : "indexOfFirstMatchingRow:"
      DESCR    : >
                 This will find the first row index that fulfils the query condition. Use the return value + 1
                 as parameter for successive calls to {@link g_dyn_query_find} to iterate through matching rows.
      SUMMARY  : Find first matching row.
      SIGNATURE: |
                 (NSUInteger)indexOfFirstMatchingRow
      RETURN:
        TYPES  : NSUInteger
        DESCR  : Table row index of first matching row (<code>NSNotFound</code> if no match).
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_find_first


  - g_dyn_query_count:
      NAME     : countRows
      DESCR    : *g_dyn_query_size_descr
      SUMMARY  : *g_dyn_query_size_summary
      SIGNATURE: (NSUInteger)countRows
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_count_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_size

  - g_dyn_query_sum_int:
      IGNORED  : ""
  - g_dyn_query_sum_float:
      IGNORED  : ""
  - g_dyn_query_sum_double:
      NAME     : "sumColumnWithIndex:"
      DESCR    : *g_dyn_query_sum_descr
      SUMMARY  : *g_dyn_query_sum_summary
      SIGNATURE: -(NSNumber *)sumColumnWithIndex:(NSUInteger)colIndex;
      PARAMS:
      - NAME   : colIndex
        DESCR  : Column index. The datatype of the column must a number type (integer, float or double).
        TYPES  : NSUInteger
      RETURN:
        TYPES  : NSNumber
        DESCR  : *g_dyn_query_sum_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_sum

  - g_dyn_query_maximum_double:
      IGNORED  : ""
  - g_dyn_query_maximum_float:
      IGNORED  : ""
  - g_dyn_query_maximum_date:
      IGNORED  : ""
  - g_dyn_query_maximum_int:
      NAME     : "maxInColumnWithIndex:"
      DESCR    : *g_dyn_query_maximum_descr
      SUMMARY  : *g_dyn_query_maximum_summary
      SIGNATURE: (id)maxInColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        DESCR  : &objc_dyn_query_number_column_descr
                 The column index. The datatype of the column must be a number type (including timestamp).
        TYPES  : NSUInteger
      RETURN:
        TYPES  : id
        DESCR  : The lowest value. Numbers are returned as <code>NSNumber</code> while timestamps are returned as <code>NSDate</code>.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_maximum

  - g_dyn_query_minimum_date:
      IGNORED  : ""
  - g_dyn_query_minimum_double:
      IGNORED  : ""
  - g_dyn_query_minimum_float:
      IGNORED  : ""
  - g_dyn_query_minimum_int:
      NAME     : "minInColumnWithIndex:"
      DESCR    : *g_dyn_query_minimum_descr
      SUMMARY  : *g_dyn_query_minimum_summary
      SIGNATURE: (id)minInColumnWithIndex:(NSUInteger)colIndex
      PARAMS:
      - NAME   : colIndex
        DESCR  : *objc_dyn_query_number_column_descr
        TYPES  : NSUInteger
      RETURN:
        TYPES  : id
        DESCR  : The lowest value. Numbers are returned as <code>NSNumber</code> while timestamps are returned as <code>NSDate</code>.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_minimum

  - g_dyn_query_average_int:
      IGNORED  : ""
  - g_dyn_query_average_float:
      IGNORED  : ""
  - g_dyn_query_average_double:
      NAME     : avgColumnWithIndex
      SUMMARY  : *g_dyn_query_average_summary
      DESCR    : *g_dyn_query_average_descr
      SIGNATURE: -(NSNumber *)avgColumnWithIndex:(NSUInteger)colIndex;
      PARAMS:
      - NAME   : colIndex
        DESCR  : Column index. The datatype of the column must be a number type (integer, float or double).
        TYPES  : NSUInteger
      RETURN:
        TYPES  : NSNumber
        DESCR  : *g_dyn_query_average_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_average

  - g_dyn_query_remove:
      NAMES    : "removeRows:"
      DESCR    : *g_dyn_query_remove_descr
      SUMMARY  : *g_dyn_query_remove_summary
      SIGNATURE: (NSUInteger)removeRows
#      PARAMS:
#      - NAME   : column
#        DESCR  : *g_dyn_query_column_index_descr
#        TYPES  : NSUInteger
#      - NAME   : resultcount
#        DESCR  : The number of rows used to calculate the average.
#        TYPES  : NSUInteger*
#      - NAME   : start
#        TYPES  : NSUInteger
#        DESCR  : "Row to begin search. Default: 0."
#     - NAME   : end
#        TYPES  : NSUInteger
#        DESCR  : "Row to stop search. Default: -1 (infinity)."
#      - NAME   : limit
#        TYPES  : NSUInteger
#        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : NSUInteger
        DESCR  : *g_dyn_query_remove_return_descr
      EXAMPLES:
      - DESCR  :
        CODE   : ex_objc_dyn_query_remove

- Utilities:
  METHODS:
  - objc_dyn_query_origin_table:
      NAME     : originTable
      SUMMARY  : Returns the origin table.
      DESCR    : The method returns the table which created the query.
      RETURN:
        TYPES  : TDBTable *
        DESCR  : The origin table.
