#
# Obj-C reference documentation for Query class
#

## TODO: Describe limitations about using correct versions of the methods on the right column_types.
## TODO: Detail what is allowed to pass in parameters (index within size() etc)
## TODO: Describe start, end index parameters in searches. end is not inclusive.

## JJEPSEN: "or" a obj-c keyword?
## JJEPSEN: count() does not take a column index as parameter (like in c++)
## JJEPSEN: max, min not defined for time compare as in c++.

ID         : class_dyn_query
TITLE      : Query  (dynamic)
SUMMARY    : *g_dyn_query_intro_summary
DESCR      : *g_dyn_query_intro_descr
SEE        :
EXAMPLES   :
- DESCR:
  CODE: ex_cpp_dyn_query_intro
IGNORE     : []                   # List of method-ids to ignore

CATEGORIES :
- Conditions:
  METHODS:
  - g_dyn_query_equals_boolean:
  - g_dyn_query_equals_integer:
  - g_dyn_query_equals_float:
  - g_dyn_query_equals_double:
  - g_dyn_query_equals_string:
  - g_dyn_query_equals_date:
  - g_dyn_query_equals_binary:
      NAMES    : [ equal, ]
      SIGNATURE: |
                 (TightdbQuery *)equal:(BOOL)value
                 (TightdbQuery *)equal:(int64_t)value
                 (TightdbQuery *)equal:(float)value
                 (TightdbQuery *)equal:(double)value
                 (TightdbQuery *)equal:(NSString *)value
                 (TightdbQuery *)equal:(NSString *)value caseSensitive:(BOOL)caseSensitive
                 (TightdbQuery *)equal:(time_t)value
      SUMMARY  : *g_dyn_query_equals_summary
      DESCR    : *g_dyn_query_equals_descr
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, const char*, BinaryData, time_t]
        DESCR  : The value.
      - NAME   : caseSensitive
        TYPES  : bool
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_equals
#  - g_dyn_query_notEquals_boolean:
  - g_dyn_query_notEquals_integer:
  - g_dyn_query_notEquals_string:
  - g_dyn_query_notEquals_date:
  - g_dyn_query_notEquals_binary:
      NAMES    : [ notEqual (not implemented for all types), not_equal, not_equal_binary ]
      SIGNATURE: |
                 (TightdbQuery *)notEqual:(int64_t)value
                 (TightdbQuery *)notEqual:(float)value
                 (TightdbQuery *)notEqual:(double)value
                 (TightdbQuery *)notEqual:(NSString *)value
                 (TightdbQuery *)notEqual:(NSString *)value caseSensitive:(BOOL)caseSensitive
                 (TightdbQuery *)notEqual:(time_t)value
 #                Query& not_equal(size_t column_ndx, bool value);
 #                Query& not_equal_binary(size_t column_ndx, const char* data, size_t size);
      SUMMARY  : *g_dyn_query_notEquals_summary
      DESCR    : *g_dyn_query_notEquals_descr
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, const char*, time_t]
        DESCR  : The value.
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : 'String match can be performed case sensitive or not. Default: <code>true</code>.'
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_notEquals
  - g_dyn_query_greaterThan:
  - g_dyn_query_greaterThan_date:
      NAMES    : [ greater, greater_date ]
      SIGNATURE: |
                 (TightdbQuery *)greater:(int64_t)value
                 (TightdbQuery *)greater:(float)value
                 (TightdbQuery *)greater:(double)value
                 (TightdbQuery *)greater:(time_t)value
      SUMMARY  : *g_dyn_query_greaterThan_summary
      DESCR    : *g_dyn_query_greaterThan_descr
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_greaterThan
  - g_dyn_query_greaterThanOrEqual:
  - g_dyn_query_greaterThanOrEqual_date:
      NAMES    : [ greaterEqual, greater_equal_date ]
      SIGNATURE: |
                 (TightdbQuery *)greaterEqual:(int64_t)value
                 (TightdbQuery *)greaterEqual:(float)value
                 (TightdbQuery *)greaterEqual:(double)value
                 (TightdbQuery *)greaterEqual:(time_t)value
      SUMMARY  : *g_dyn_query_greaterThanOrEqual_summary
      DESCR    : *g_dyn_query_greaterThanOrEqual_descr
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_greaterThanOrEqual
  - g_dyn_query_lessThan:
  - g_dyn_query_lessThan_date:
      NAMES    : [less, less_date]
      SIGNATURE: |
                 (TightdbQuery *)less:(int64_t)value
                 (TightdbQuery *)less:(float)value
                 (TightdbQuery *)less:(double)value
                 (TightdbQuery *)less:(time_t)value
      SUMMARY  : *g_dyn_query_lessThan_summary
      DESCR    : *g_dyn_query_lessThan_descr
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_lessThan
  - g_dyn_query_lessThanOrEqual:
  - g_dyn_query_lessThanOrEqual_date:
      NAMES    : [lessEqual, less_equal_date]
      SIGNATURE: |
                 (TightdbQuery *)lessEqual:(int64_t)value
                 (TightdbQuery *)lessEqual:(float)value
                 (TightdbQuery *)lessEqual:(double)value
                 (TightdbQuery *)lessEqual:(time_t)value
      SUMMARY  : *g_dyn_query_lessThanOrEqual_summary
      DESCR    : *g_dyn_query_lessThanOrEqual_descr
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_lessThanOrEqual
  - g_dyn_query_between:
  - g_dyn_query_between_date:
      NAMES    : [between, between_date]
      SIGNATURE: |
                 (TightdbQuery *)between:(int64_t)from to:(int64_t)to
                 (TightdbQuery *)between:(float)from to:(float)to
                 (TightdbQuery *)between:(double)from to:(double)to
                 (TightdbQuery *)between:(time_t)from to:(time_t)to
      DESCR    : *g_dyn_query_between_descr
      SUMMARY  : *g_dyn_query_between_summary
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : from
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : Lower bound of range (inclusive).
      - NAME   : to
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : Upper bound of range (inclusive).
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_between
  - g_dyn_query_startsWith:
#  - g_dyn_query_startsWith_binary:
      NAMES    : [beginsWith] #, begins_with_binary]
      SIGNATURE: |
                 (TightdbQuery *)beginsWith:(NSString *)value caseSensitive:(BOOL)caseSensitive
#                (TightdbQuery *)beginsWith:(NSString *)value
      DESCR    : *g_dyn_query_startsWith_descr
      SUMMARY  : *g_dyn_query_startsWith_summary
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value.
      - NAME   : caseSensitive
        TYPES  : bool
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_startsWith
  - g_dyn_query_endsWith:
#  - g_dyn_query_endsWith_binary:
      NAMES    : [endsWith] #, ends_with_binary]
      SIGNATURE: |
                 (TightdbQuery *)endsWith:(NSString *)value caseSensitive:(BOOL)caseSensitive
#                (TightdbQuery *)endsWith:(NSString *)value
      DESCR    : *g_dyn_query_endsWith_descr
      SUMMARY  : *g_dyn_query_endsWith_summary
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value.
      - NAME   : caseSensitive
        TYPES  : bool
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_endsWith
  - g_dyn_query_contains:
#  - g_dyn_query_contains_binary:
      NAMES    : [contains] #, contains_binary]
      SIGNATURE: |
                 (TightdbQuery *)contains:(NSString *)value caseSensitive:(BOOL)caseSensitive
                 (TightdbQuery *)contains:(NSString *)value
#                 Query& contains_binary(size_t column_ndx, const char* data, size_t size);
      DESCR    : *g_dyn_query_contains_descr
      SUMMARY  : *g_dyn_query_contains_summary
      PARAMS:
      - NAME   : col_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value
      - NAME   : caseSensitive
        TYPES  : bool
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_contains
- Combiners:
  METHODS:
  - g_dyn_query_group:
      NAMES    : group
      DESCR    : *g_dyn_query_group_descr
      SUMMARY  : *g_dyn_query_group_summary
      SIGNATURE: (void)group
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_group
  - g_dyn_query_endGroup:
      NAMES    : endGroup
      DESCR    : *g_dyn_query_endGroup_descr
      SUMMARY  : *g_dyn_query_endGroup_summary
      SIGNATURE: (void)endgroup
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_group
  - g_dyn_query_or:
      NAMES    : or
      DESCR    : *g_dyn_query_or_descr
      SUMMARY  : *g_dyn_query_or_summary
      SIGNATURE: (void)or
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_or
  - g_dyn_query_subtable:
      NAMES    : subtable
      DESCR    : *g_dyn_query_subtable_descr
      SUMMARY  : *g_dyn_query_subtable_summary
      SIGNATURE: (void)subtable:(size_t)column
      PARAMS:
      - NAME   : column
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_subtable
  - g_dyn_query_endSubtable:
      NAMES    : parent
      DESCR    : *g_dyn_query_endSubtable_descr
      SUMMARY  : *g_dyn_query_endSubtable_summary
      SIGNATURE: (void)parent
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_subtable
- Actions:
  METHODS:
  - g_dyn_query_find_all_const:
  - g_dyn_query_find_all:
      NAMES    : findAll (not yet implemented)
      DESCR    : *g_dyn_query_find_all_descr
      SUMMARY  : *g_dyn_query_find_all_summary
      SIGNATURE: |
                 TableView      find_all(size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));
                 ConstTableView find_all(size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));
      PARAMS:
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [TableView, ConstTableView]
        DESCR  : The TableView object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_findall
  - g_dyn_query_find_next:
      NAMES    : findNext (not yet implemented)
      DESCR    : *g_dyn_query_find_next_descr
      SUMMARY  : *g_dyn_query_find_next_summary
      PARAMS:
      - NAME   : lastmatch
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : Row number
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_find_next
  - g_dyn_query_sum:
  - g_dyn_query_sum_float:
  - g_dyn_query_sum_double:
      NAMES    : [sum*, sum_float, sum_double]
      DESCR    : *g_dyn_query_sum_descr
      SUMMARY  : *g_dyn_query_sum_summary
      CONST    : true
      SIGNATURE: |
                 (int64_t)sumInt:(size_t)col_ndx
                 (double)sumFloat:(size_t)col_ndx
                 (double)sumDouble:(size_t)col_ndx
      PARAMS:
      - NAME   : col_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>sum_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The sum.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_sum
  - g_dyn_query_size:
      NAMES    : count
      DESCR    : *g_dyn_query_size_descr
      SUMMARY  : *g_dyn_query_size_summary
      SIGNATURE: (size_t)count
      CONST    : true
      PARAMS:
      - NAME   : column
        DESCR  : Column index.
        TYPES  : size_t
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_size
  - g_dyn_query_maximum_date:
  - g_dyn_query_maximum_double:
  - g_dyn_query_maximum_float:
  - g_dyn_query_maximum:
      NAMES    : max*
      DESCR    : *g_dyn_query_maximum_descr
      SUMMARY  : *g_dyn_query_maximum_summary
      CONST    : true
      SIGNATURE: |
                 (int64_t)maxInt:(size_t)col_ndx
                 (float)maxFloat:(size_t)col_ndx
                 (double)maxDouble:(size_t)col_ndx

      PARAMS:
      - NAME   : col_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>maximum_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      RETURN:
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The highest value.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_maximum
  - g_dyn_query_minimum_date:
  - g_dyn_query_minimum_double:
  - g_dyn_query_minimum_float:
  - g_dyn_query_minimum:
      NAMES    : min*
      DESCR    : *g_dyn_query_minimum_descr
      SUMMARY  : *g_dyn_query_minimum_summary
      CONST    : true
      SIGNATURE: |
                 (int64_t)minInt:(size_t)col_ndx
                 (float)minFloat:(size_t)col_ndx
                 (double)minDouble:(size_t)col_ndx
      PARAMS:
      - NAME   : col_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>minimum_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      RETURN:
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The lowest value.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_minimum
  - g_dyn_query_average_double:
  - g_dyn_query_average_float:
  - g_dyn_query_average:
      NAMES    : avg*
      SUMMARY  : *g_dyn_query_average_summary
      DESCR    : *g_dyn_query_average_descr
      CONST    : true
      SIGNATURE: |
                 (double)avgInt:(size_t)col_ndx
                 (double)avgFloat:(size_t)col_ndx
                 (double)avgDouble:(size_t)col_ndx
      PARAMS:
      - NAME   : col_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>average_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      RETURN:
        TYPES  : double
        DESCR  : The average.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_average
  - g_dyn_query_remove:
      NAMES    : remove (not yet implemented)
      DESCR    : *g_dyn_query_remove_descr
      SUMMARY  : *g_dyn_query_remove_summary
      CONST    : true
      PARAMS:
      - NAME   : column
        DESCR  : Column index.
        TYPES  : size_t
      - NAME   : resultcount
        DESCR  : The number of rows used to calculate the average.
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows removed.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_remove
