#
# C++ reference documentation for Query class
#

## TODO: Describe limitations about using correct versions of the methods on the right column_types.
## TODO: Detail what is allowed to pass in parameters (index within size() etc)
## TODO: Describe start, end index parameters in searches. end is not inclusive.

ID         : class_dyn_query
TITLE      : Query  (dynamic)
SUMMARY    : &g_dyn_query_intro_summary
             Query your TightDB table.
DESCR      : &g_dyn_query_intro_descr
             >
             Query objects are used to build up queries. A query is tied to a
             {@link class_dyn_table}. The dynamic query class is used in conjunction with the
             dynamic table class.

             Conditions is added to a query through a
             <a href="http://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a>.
             This means that the methods representing the conditions will return the
             query object. In general, the predicate functions require a column index
             as parameter. The compiler cannot infer the correct types as tables are
             declared at run time. Using wrong types might lead to run time errors.

             Once the query is ready, it is possible to reuse by multiple calls to
             the action methods.
             Moreover, it is possible extend the query with new conditions after applying an
             action method and thereby implement a drill-down. It is important to stress that
             no data is cached, and the new queries cannot benefit from previous queries.

             Alternatively, a query can result in a {@link class_dyn_tableview} which can be further
             queried.
SEE        :
EXAMPLES   :
- DESCR:
  CODE: ex_cpp_dyn_query_intro
IGNORE     : []                   # List of method-ids to ignore
CATEGORIES :
- Conditions:
  METHODS:
  - g_dyn_query_equals_boolean:
  - g_dyn_query_equals_integer:
  - g_dyn_query_equals_float:
  - g_dyn_query_equals_double:
  - g_dyn_query_equals_string:
  - g_dyn_query_equals_date:
  - g_dyn_query_equals_binary:
      NAMES    : [ equal, equal_date, equal_binary ]
      SIGNATURE: |
                 Query& equal(size_t column_ndx, bool value);
                 Query& equal(size_t column_ndx, int64_t value);
                 Query& equal(size_t column_ndx, float value);
                 Query& equal(size_t column_ndx, double value);
                 Query& equal(size_t column_ndx, const char* value, bool case_sensitive=true);
                 Query& equal(size_t column_ndx, BinaryData value);
                 Query& equal_date(size_t column_ndx, time_t value);
      SUMMARY  : &g_dyn_query_equals_summary
                 Equal to.
      DESCR    : &g_dyn_query_equals_descr
                 Queries for column values which equals a specified value.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, const char*, BinaryData, time_t]
        DESCR  : The value.
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : &g_dyn_query_case_sensitive_descr
                 'String match can be performed case sensitive or not. Default: <code>true</code>.'
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_equals
#  - g_dyn_query_notEquals_boolean:
  - g_dyn_query_notEquals_integer:
  - g_dyn_query_notEquals_string:
  - g_dyn_query_notEquals_date:
  - g_dyn_query_notEquals_binary:
      NAMES    : [ not_equal, not_equal, not_equal_binary ]
      SIGNATURE: |
                 Query& not_equal(size_t column_ndx, int64_t value);
                 Query& not_equal(size_t column_ndx, float value);
                 Query& not_equal(size_t column_ndx, double value);
                 Query& not_equal(size_t column_ndx, const char* value, bool case_sensitive=true);
                 Query& not_equal_date(size_t column_ndx, time_t value);
 #                Query& not_equal(size_t column_ndx, bool value);
 #                Query& not_equal_binary(size_t column_ndx, const char* data, size_t size);
      SUMMARY  : &g_dyn_query_notEquals_summary
                 Not equal to.
      DESCR    : &g_dyn_query_notEquals_descr
                 Queries for column values which do not equal a specified value.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [bool, int64_t, float, double, const char*, time_t]
        DESCR  : The value.
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : 'String match can be performed case sensitive or not. Default: <code>true</code>.'
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_notEquals
  - g_dyn_query_greaterThan:
  - g_dyn_query_greaterThan_date:
      NAMES    : [ greater, greater_date ]
      SIGNATURE: |
                 Query& greater(size_t column_ndx, int64_t value);
                 Query& greater(size_t column_ndx, float value);
                 Query& greater(size_t column_ndx, double value);
                 Query& greater_date(size_t column_ndx, time_t value);
      SUMMARY  : &g_dyn_query_greaterThan_summary
                 Greater than.
      DESCR    : &g_dyn_query_greaterThan_descr
                 Queries for column values greater than a specified value.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_greaterThan
  - g_dyn_query_greaterThanOrEqual:
  - g_dyn_query_greaterThanOrEqual_date:
      NAMES    : [ greater_equal, greater_equal_date ]
      SIGNATURE: |
                 Query& greater_equal(size_t column_ndx, int64_t value);
                 Query& greater_equal(size_t column_ndx, float value);
                 Query& greater_equal(size_t column_ndx, double value);
                 Query& greater_equal_date(size_t column_ndx, time_t value);
      SUMMARY  : &g_dyn_query_greaterThanOrEqual_summary
                 Greater than or equal to.
      DESCR    : &g_dyn_query_greaterThanOrEqual_descr
                 Queries for column values greater than or equal to a specified value.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_greaterThanOrEqual
  - g_dyn_query_lessThan:
  - g_dyn_query_lessThan_date:
      NAMES    : [less, less_date]
      SIGNATURE: |
                 Query& less(size_t column_ndx, int64_t value);
                 Query& less(size_t column_ndx, float value);
                 Query& less(size_t column_ndx, double value);
                 Query& less_date(size_t column_ndx, time_t value);
      SUMMARY  : &g_dyn_query_lessThan_summary
                 Less than.
      DESCR    : &g_dyn_query_lessThan_descr
                 Queries for column values less than a specified value.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_lessThan
  - g_dyn_query_lessThanOrEqual:
  - g_dyn_query_lessThanOrEqual_date:
      NAMES    : [less_equal, less_equal_date]
      SIGNATURE: |
                 Query& less_equal(size_t column_ndx, int64_t value);
                 Query& less_equal(size_t column_ndx, int64_t value);
                 Query& less_equal(size_t column_ndx, int64_t value);
                 Query& less_equal_date(size_t column_ndx, time_t value);
      SUMMARY  : &g_dyn_query_lessThanOrEqual_summary
                 Less than or equal to.
      DESCR    : &g_dyn_query_lessThanOrEqual_descr
                 Queries for column values less than or equal to a specified value.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The value.
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_lessThanOrEqual
  - g_dyn_query_between:
  - g_dyn_query_between_date:
      NAMES    : [between, between_date]
      SIGNATURE: |
                 Query& between(size_t column_ndx, int64_t from, int64_t to);
                 Query& between(size_t column_ndx, float from, float to);
                 Query& between(size_t column_ndx, double from, double to);
                 Query& between_date(size_t column_ndx, time_t from, time_t to);
      DESCR    : &g_dyn_query_between_descr
                 Queries for column values in ranges.
      SUMMARY  : &g_dyn_query_between_summary
                 Belongs to an interval.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : from
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : Lower bound of range (inclusive).
      - NAME   : to
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : Upper bound of range (inclusive).
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_between
  - g_dyn_query_startsWith:
#  - g_dyn_query_startsWith_binary:
      NAMES    : [begins_with] #, begins_with_binary]
      SIGNATURE: |
                 Query& begins_with(size_t column_ndx, const char* value, bool case_sensitive=true);
#                 Query& begins_with_binary(size_t column_ndx, const char* data, size_t size);
      DESCR    : &g_dyn_query_startsWith_descr
                 Queries for column values which begin with a certain prefix.
      SUMMARY  : &g_dyn_query_startsWith_summary
                 Substring match at the begining of the attribute.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value.
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_startsWith
  - g_dyn_query_endsWith:
#  - g_dyn_query_endsWith_binary:
      NAMES    : [ends_with] #, ends_with_binary]
      SIGNATURE: |
                 Query& ends_with(size_t column_ndx, const char* value, bool case_sensitive=true);
#                 Query& ends_with_binary(size_t column_ndx, const char* data, size_t size);
      DESCR    : &g_dyn_query_endsWith_descr
                 Queries for column values which end with a specified suffix.
      SUMMARY  : &g_dyn_query_endsWith_summary
                 Substring match at the end of the value in the column <code>column_ndx</code>.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value.
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_endsWith
  - g_dyn_query_contains:
#  - g_dyn_query_contains_binary:
      NAMES    : [contains] #, contains_binary]
      SIGNATURE: |
                 Query& contains(size_t column_ndx, const char* value, bool case_sensitive=true);
#                 Query& contains_binary(size_t column_ndx, const char* data, size_t size);
      DESCR    : &g_dyn_query_contains_descr
                 Queries for column values which contain the specified substring.
      SUMMARY  : &g_dyn_query_contains_summary
                 Substring search.
      PARAMS:
      - NAME   : column_ndx
        TYPES  : size_t
        DESCR  : Column index.
      - NAME   : value
        TYPES  : const char*
        DESCR  : The value
      - NAME   : case_sensitive
        TYPES  : bool
        DESCR  : *g_dyn_query_case_sensitive_descr
      RETURN:
        TYPES  : Query&
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_contains
- Combiners:
  METHODS:
  - g_dyn_query_group:
      NAMES    : group
      DESCR    : &g_dyn_query_group_descr
                 >
                 Group conditions ("left" parenthesis). Group of conditions can be nested and they are
                 conceptually a parenthesis.
      SUMMARY  : &g_dyn_query_group_summary
                 Start group ("left parenthesis").
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_group
  - g_dyn_query_endGroup:
      NAMES    : end_group
      DESCR    : &g_dyn_query_endGroup_descr
                 Group conditions ("right" parenthesis).
      SUMMARY  : &g_dyn_query_endGroup_summary
                 Stop group ("right parenthesis").
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_group
  - g_dyn_query_or:
      NAMES    : Or
      DESCR    : &g_dyn_query_or_descr
                 Conditions to the left and right are folded using logical-or.
      SUMMARY  : &g_dyn_query_or_summary
                 Logical-or.
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_or
  - g_dyn_query_subtable:
      NAMES    : subtable
      DESCR    : &g_dyn_query_subtable_descr
                 Query a subtable.
      SUMMARY  : &g_dyn_query_subtable_summary
                 Query a subtable.
      PARAMS:
      - NAME   : column
        TYPES  : size_t
        DESCR  : Column index.
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_subtable
  - g_dyn_query_endSubtable:
      NAMES    : end_subtable
      DESCR    : &g_dyn_query_endSubtable_descr
                 End of subtable query.
      SUMMARY  : &g_dyn_query_endSubtable_summary
                 End of subtable query.
      RETURN:
        TYPES  : Query
        DESCR  : The query object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_subtable
- Actions:
  METHODS:
  - g_dyn_query_find_all_const:
  - g_dyn_query_find_all:
      NAMES    : find_all
      DESCR    : &g_dyn_query_find_all_descr
                 This method executes the query. See the {@link class_dyn_tableview} class for further details.
      SUMMARY  : &g_dyn_query_find_all_summary
                 Execute query.
      SIGNATURE: |
                 TableView      find_all(size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));
                 ConstTableView find_all(size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));
      PARAMS:
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [TableView, ConstTableView]
        DESCR  : The TableView object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_findall
  - g_dyn_query_find_next:
      NAMES    : find_next
      DESCR    : &g_dyn_query_find_next_descr
                 Find next row.
      SUMMARY  : &g_dyn_query_find_next_summary
                 Find next row.
      PARAMS:
      - NAME   : lastmatch
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : Row number
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_find_next
  - g_dyn_query_sum:
  - g_dyn_query_sum_float:
  - g_dyn_query_sum_double:
      NAMES    : [sum, sum_float, sum_double]
      DESCR    : &g_dyn_query_sum_descr
                 |
                 This methods calculates the sum of the values in a specific column.
                 
                 Note: <code>sum()</code> can overflow depending on the values stored. Nothing will indicate this.
                 Note: Adding many floats or doubles can accumulate representation imprecisions.
      SUMMARY  : &g_dyn_query_sum_summary
                 Calculate sum.
      CONST    : true
      SIGNATURE: |
                 int64_t sum(size_t column_ndx, size_t* resultcount=NULL, size_t start=0, size_t end = size_t(-1), size_t limit=size_t(-1)) const;
                 double sum_float(..same parameters as above..)
                 double sum_double(..same parameters as above..)
      PARAMS:
      - NAME   : column_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>sum_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      - NAME   : resultcount
        DESCR  : The number of rows used to calculate the sum.
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [int64_t, float, double]
        DESCR  : The sum.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_sum
  - g_dyn_query_size:
      NAMES    : count
      DESCR    : &g_dyn_query_size_descr
                 The method finds the number of matching rows.
      SUMMARY  : &g_dyn_query_size_summary
                 Number of matching rows.
      CONST    : true
      PARAMS:
      - NAME   : column
        DESCR  : Column index.
        TYPES  : size_t
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_size
  - g_dyn_query_maximum_date:
  - g_dyn_query_maximum_double:
  - g_dyn_query_maximum_float:
  - g_dyn_query_maximum:
      NAMES    : maximum
      DESCR    : &g_dyn_query_maximum_descr
                 This method finds the highest value in the column or in a range of rows in the column.
      SUMMARY  : &g_dyn_query_maximum_summary
                 Highest value.
      CONST    : true
      SIGNATURE: |
                 int64_t maximum(size_t column_ndx, size_t* resultcount=NULL, size_t start=0, size_t end = size_t(-1), size_t limit=size_t(-1)) const;
                 float   maximum_float(..parameters as above..)
                 double  maximum_double(..parameters as above..)
                 time_t  maximum_date(..parameters as above..)
      PARAMS:
      - NAME   : column_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>maximum_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      - NAME   : resultcount
        DESCR  : The number of rows used to find the highest value.
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to search. Default: -1 (infinity)."
      RETURN:
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The highest value.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_maximum
  - g_dyn_query_minimum_date:
  - g_dyn_query_minimum_double:
  - g_dyn_query_minimum_float:
  - g_dyn_query_minimum:
      NAMES    : minimum
      DESCR    : &g_dyn_query_minimum_descr
                 This method finds the lowest value in the column or in a range of rows in the column.
      SUMMARY  : &g_dyn_query_minimum_summary
                 Lowest value.
      CONST    : true
      SIGNATURE: |
                 int64_t minimum(size_t column_ndx, size_t* resultcount=NULL, size_t start=0, size_t end = size_t(-1), size_t limit=size_t(-1)) const;
                 float   minimum_float(..parameters as above..)
                 double  minimum_double(..parameters as above..)
                 time_t  minimum_date(..parameters as above..)
      PARAMS:
      - NAME   : column_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>minimum_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      - NAME   : resultcount
        DESCR  : The number of rows used to find the lowest value.
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [int64_t, float, double, time_t]
        DESCR  : The lowest value.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_minimum
  - g_dyn_query_average_double:
  - g_dyn_query_average_float:
  - g_dyn_query_average:
      NAMES    : average
      SUMMARY  : &g_dyn_query_average_summary
                 Calculates the average.
      DESCR    : &g_dyn_query_average_descr
                 |
                 The method calculates the average of a specific column.
                 
                 Note: <code>average()</code> uses <code>sum()</code> which can overflow depending on the values stored. Nothing will indicate this.
                 Note: Averaging many floats or doubles can accumulate representation imprecisions.
      CONST    : true
      SIGNATURE: |
                 double average(size_t column_ndx, size_t* resultcount=NULL, size_t start=0, size_t end = size_t(-1), size_t limit=size_t(-1)) const;
                 double average_float(..as above..)
                 double average_double(..as above..)
      PARAMS:
      - NAME   : column_ndx
        DESCR  : Column index. The datatype of the column must match the function called. E.g. <code>average_float()</code> can only be used on columns which contains floats.
        TYPES  : size_t
      - NAME   : resultcount
        DESCR  : The number of rows used to calculate the average. If zero, the return value is undefined.
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : double
        DESCR  : The average.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_average
  - g_dyn_query_remove:
      NAMES    : remove
      DESCR    : &g_dyn_query_remove_descr
                 This method will remove all matching rows in the source table.
      SUMMARY  : &g_dyn_query_remove_summary
                 Remove rows.
      CONST    : true
      PARAMS:
      - NAME   : column
        DESCR  : Column index.
        TYPES  : size_t
      - NAME   : resultcount
        DESCR  : The number of rows used to calculate the average.
        TYPES  : size_t*
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : size_t
        DESCR  : The number of rows removed.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_remove
- Multithreaded:
  METHODS:
  - g_dyn_query_find_all_multi:
  - g_dyn_query_find_all_const_multi:
      NAMES    : find_all_multi
      DESCR    : &g_dyn_query_find_all_multi_descr
                 >
                 This method execute a query using (POSIX) threads that is, the query is parallellized and
                 can lower the search time on a multi-core computer. See the {@link class_dyn_tableview} class
                 for further details.
      SUMMARY  : &g_dyn_query_find_all_multi_summary
                 Execute query.
      SIGNATURE: |
                 TableView      find_all_multi(Table& table, size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));
                 ConstTableView find_all_multi(const Table& table, size_t start=0, size_t end=size_t(-1), size_t limit=size_t(-1));

      PARAMS:
      - NAME   : start
        TYPES  : size_t
        DESCR  : "Row to begin search. Default: 0."
      - NAME   : end
        TYPES  : size_t
        DESCR  : "Row to stop search. Default: -1 (infinity)."
      - NAME   : limit
        TYPES  : size_t
        DESCR  : "Maximum number of rows to find. Default: -1 (infinity)."
      RETURN:
        TYPES  : [TableView, ConstTableView]
        DESCR  : The TableView object.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_find_all_multi
  - g_dyn_query_set_threads:
      NAMES    : set_threads
      SUMMARY  : &g_dyn_query_set_threads_summary
                 Set the number of threads.
      DESCR    : &g_dyn_query_set_threads_descr
                 The method sets the number of threads used by {@link g_dyn_query_find_all_multi}.
      PARAMS:
      - NAME   : threadcount
        TYPES  : unsigned int
        DESCR  : Number of threads.
      RETURN:
        DESCR  : <code>true</code> if succesfull, <code>false</code> otherwise.
        TYPES  : int
      EXAMPLES:
      - DESCR  :
        CODE   : ex_cpp_dyn_query_find_all_multi
